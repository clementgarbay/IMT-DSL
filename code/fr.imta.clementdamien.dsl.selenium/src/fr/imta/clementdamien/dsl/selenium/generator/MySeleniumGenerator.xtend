/*
 * generated by Xtext 2.12.0
 */
package fr.imta.clementdamien.dsl.selenium.generator

import org.eclipse.emf.ecore.resource.Resource

import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext


import com.google.inject.Inject;
import org.eclipse.xtext.naming.IQualifiedNameProvider;
import fr.imta.clementdamien.dsl.selenium.mySelenium.*;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class MySeleniumGenerator extends AbstractGenerator {
	
	 @Inject extension IQualifiedNameProvider;
     @Inject extension ProgramGenerator;

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		for (e : resource.contents.filter(Program)) {
            fsa.generateFile(
                        "Test.java",
                        e.compileProgram 
                )
        }
	}
	
	

    
    
    /*def compile(Function function) '''
    @Test
    private void «function.name.name»() {
    		«FOR statement:function.statements»
    			«statement.compileStatement»
       	«ENDFOR»
    }
    
    '''
    
    
    def dispatch compileStatement(Action action) {
    		
		val stringParameter = action.stringParameter
		val selectorParameter = action.selectorParameter
		
		val parameter = 
			if(stringParameter !== null){
				'''"stringParameter"'''
			} else if (selectorParameter !== null) {
				selectorParameter.compile
			} else {
				''''''
			}
		
		
		'''
		«action.target.compileActionTarget».«action.action»(«parameter»);
		
		'''
    		
    }
    
    def compile(FunctionName functionName) '''«functionName.name»'''
    
    
   
    
    def dispatch compileActionTarget(Selector selector) '''«selector.compile»'''
    def dispatch compileActionTarget(VariableRef varRef) '''«varRef.compile»'''
    
    def compile(VariableRef varRef) '''«varRef.ref.compile»'''
    
    def dispatch compileStatement(FunctionCall functionCall) {
    		val params = functionCall.params.variables.map(param | '''«param.compileVariableCall»''').join(", ")
	    '''
	    «functionCall.ref.compile»(«params»);
	    
	    '''
    } 
    
    
    def dispatch compileVariableCall(VariableRef variableRef) '''«variableRef.ref.compile»'''
    def dispatch compileVariableCall(StringParameter stringParam) '''"«stringParam.value»"'''

    def dispatch compileStatement(AssertContains assertContains) '''
	    	Assertions.assertThatCode(() -> {
	        «assertContains.container.compileAssertableElement».findElement(«assertContains.element.compileAssertableElement»);
	    }).doesNotThrowAnyException();
    '''
    
    def dispatch compileStatement(AssertEquals assertEquals) '''
	assertEquals(«assertEquals.getAssertableElement().get(0)», «assertEquals.getAssertableElement().get(1)»);
    '''
    
    def dispatch compileStatement(NavigationAction navigationAction) '''
    // «navigationAction.action» «navigationAction.param»
    «IF navigationAction.action == "openBrowser"»
    		«IF navigationAction.param == "chrome"»
         service = new ChromeDriverService.Builder()
                            .usingDriverExecutable(new File(CHROMEDRIVER_PATH))
                            .usingAnyFreePort()
                            .build();
         service.start();
         driver = new RemoteWebDriver(service.getUrl(), DesiredCapabilities.chrome());
        «ENDIF»
    		«IF navigationAction.param == "firefox"»
         // todo openBrowser firefox
        «ENDIF»
    «ENDIF»
    «IF navigationAction.action == "go"»
    	driver.get("«navigationAction.param»");
 	«ENDIF»
 	
    '''
    
    def dispatch compileStatement(AssignAction assignAction) '''
    // assinging
   	
    '''
    
    
    def dispatch compileAssertableElement(Variable variable) '''«variable.compile»'''
    def dispatch compileAssertableElement(StringParameter sp) '''"«sp.value»"'''
    def dispatch compileAssertableElement(Projection projection) '''«projection.compile»'''
    def dispatch compileAssertableElement(FunctionCall fc) '''«fc.compileStatement»'''
    
    def compile(Variable variable) '''«variable.name»'''
    
    def compile(Projection projection) '''«projection.selector.compile».getAttribute("«projection.projectionAction»")'''
    
  
	def compileSelectorAttributes(Selector selector){
  		if (selector.attrs !== null && selector.attrs.attrs !== null){
  			return selector.attrs.attrs.map[attribute | 
				'''(@«attribute.name» = '«attribute.value»')'''
			].join(" AND ")
		}
		''''''
	}
  
    def compile(Selector selector) '''
    // selector
    driver.findElement(By.xpath("//«selector.element»[«selector.compileSelectorAttributes»]"));
    '''
    */
}
