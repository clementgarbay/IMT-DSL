grammar fr.imta.clementdamien.dsl.selenium.MySelenium with org.eclipse.xtext.common.Terminals

generate mySelenium "http://www.imta.fr/clementdamien/dsl/selenium/MySelenium"



Program:
	Functions | Statements
;

Functions:
	functions += Function+ mainFunction = MainFunction
;

Statements:
	statements += Statement+
;

MainFunction:
    {MainFunction} 'def' 'main' '{'
        statements += Statement*
    '}'
;

Function:
    'def' name=FunctionName params = FunctionParameters? '{'
        statements += Statement*
    '}'
;

FunctionName:
    name=ID
;

FunctionCall:
    ref=[FunctionName] params = FunctionCallParameters
;

Projection:
    selector=Selector '.' projectionAction=ProjectionAction
;

ProjectionAction: 'value' | 'text' | 'html';

Statement:
    Action |
    AssignAction | 
    FunctionCall | 
    AssertEquals | 
    AssertContains | 
    NavigationAction
;

AssertEquals:
    'assert' assertableElement += AssertableElement '=' assertableElement += AssertableElement
;

AssertContains:
    'assert' container = AssertableElement 'contains' element = AssertableElement
;

AssertableElement: 
    Variable | StringParameter | Projection | FunctionCall
;

NavigationAction:
    action=NavigationActionType param=STRING
;
NavigationActionType:
    "go" | "openBrowser"
;

Action:
    action=ActionType target=ActionTarget (selectorParameter=Selector | stringParameter=STRING)?
;

ActionTarget:
	Selector | VariableRef
;

AssignAction:
    "assign" selector=Selector val=Variable
;


Selector:
    element=DOMElement '[' (attrs = Attributes)? ']' '.all'? 
;

Attributes:
	attrs += Attribute (',' attrs += Attribute)* 
;

Attribute:
    name=DOMAttribute '=' (value = STRING | val = VariableRef)
;


DOMAttribute: 'name' | 'text' | 'alt' | 'checked' | 'class' | 'type';

DOMElement: 'link' | 'button' | 'checkbox' | 'input' | 'h1' | 'body' | 'select' | 'a' | 'img';

ActionType: 'click' | 'assign' | 'fill' | 'choose';

FunctionParameters:
    '(' variables += Variable (',' variables += Variable)* ')'
;

FunctionCallParameters:
    '(' variables += VariableCall (',' variables += VariableCall)* ')'
;

VariableCall:
    VariableRef | StringParameter
;

VariableRef:
    ref=[Variable]
;

Variable:
    name=ID
;
StringParameter:
    value=STRING
;
