/*
 * generated by Xtext 2.12.0
 */
package fr.imta.clementdamien.dsl.selenium.serializer;

import com.google.inject.Inject;
import fr.imta.clementdamien.dsl.selenium.mySelenium.ActionParameterString;
import fr.imta.clementdamien.dsl.selenium.mySelenium.AssertContains;
import fr.imta.clementdamien.dsl.selenium.mySelenium.AssertEquals;
import fr.imta.clementdamien.dsl.selenium.mySelenium.AssignAction;
import fr.imta.clementdamien.dsl.selenium.mySelenium.Attribute;
import fr.imta.clementdamien.dsl.selenium.mySelenium.Attributes;
import fr.imta.clementdamien.dsl.selenium.mySelenium.Function;
import fr.imta.clementdamien.dsl.selenium.mySelenium.FunctionCall;
import fr.imta.clementdamien.dsl.selenium.mySelenium.FunctionCallParameters;
import fr.imta.clementdamien.dsl.selenium.mySelenium.FunctionName;
import fr.imta.clementdamien.dsl.selenium.mySelenium.FunctionParameters;
import fr.imta.clementdamien.dsl.selenium.mySelenium.Functions;
import fr.imta.clementdamien.dsl.selenium.mySelenium.MainFunction;
import fr.imta.clementdamien.dsl.selenium.mySelenium.MySeleniumPackage;
import fr.imta.clementdamien.dsl.selenium.mySelenium.NavigationAction;
import fr.imta.clementdamien.dsl.selenium.mySelenium.Parent;
import fr.imta.clementdamien.dsl.selenium.mySelenium.Projection;
import fr.imta.clementdamien.dsl.selenium.mySelenium.Selector;
import fr.imta.clementdamien.dsl.selenium.mySelenium.Statements;
import fr.imta.clementdamien.dsl.selenium.mySelenium.StringParameter;
import fr.imta.clementdamien.dsl.selenium.mySelenium.Variable;
import fr.imta.clementdamien.dsl.selenium.mySelenium.VariableRef;
import fr.imta.clementdamien.dsl.selenium.services.MySeleniumGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class MySeleniumSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MySeleniumGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == MySeleniumPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MySeleniumPackage.ACTION:
				sequence_Action(context, (fr.imta.clementdamien.dsl.selenium.mySelenium.Action) semanticObject); 
				return; 
			case MySeleniumPackage.ACTION_PARAMETER_STRING:
				sequence_ActionParameterString(context, (ActionParameterString) semanticObject); 
				return; 
			case MySeleniumPackage.ASSERT_CONTAINS:
				sequence_AssertContains(context, (AssertContains) semanticObject); 
				return; 
			case MySeleniumPackage.ASSERT_EQUALS:
				sequence_AssertEquals(context, (AssertEquals) semanticObject); 
				return; 
			case MySeleniumPackage.ASSIGN_ACTION:
				sequence_AssignAction(context, (AssignAction) semanticObject); 
				return; 
			case MySeleniumPackage.ATTRIBUTE:
				sequence_Attribute(context, (Attribute) semanticObject); 
				return; 
			case MySeleniumPackage.ATTRIBUTES:
				sequence_Attributes(context, (Attributes) semanticObject); 
				return; 
			case MySeleniumPackage.FUNCTION:
				sequence_Function(context, (Function) semanticObject); 
				return; 
			case MySeleniumPackage.FUNCTION_CALL:
				sequence_FunctionCall(context, (FunctionCall) semanticObject); 
				return; 
			case MySeleniumPackage.FUNCTION_CALL_PARAMETERS:
				sequence_FunctionCallParameters(context, (FunctionCallParameters) semanticObject); 
				return; 
			case MySeleniumPackage.FUNCTION_NAME:
				sequence_FunctionName(context, (FunctionName) semanticObject); 
				return; 
			case MySeleniumPackage.FUNCTION_PARAMETERS:
				sequence_FunctionParameters(context, (FunctionParameters) semanticObject); 
				return; 
			case MySeleniumPackage.FUNCTIONS:
				sequence_Functions(context, (Functions) semanticObject); 
				return; 
			case MySeleniumPackage.MAIN_FUNCTION:
				sequence_MainFunction(context, (MainFunction) semanticObject); 
				return; 
			case MySeleniumPackage.NAVIGATION_ACTION:
				sequence_NavigationAction(context, (NavigationAction) semanticObject); 
				return; 
			case MySeleniumPackage.PARENT:
				sequence_Parent(context, (Parent) semanticObject); 
				return; 
			case MySeleniumPackage.PROJECTION:
				sequence_Projection(context, (Projection) semanticObject); 
				return; 
			case MySeleniumPackage.SELECTOR:
				sequence_Selector(context, (Selector) semanticObject); 
				return; 
			case MySeleniumPackage.STATEMENTS:
				sequence_Statements(context, (Statements) semanticObject); 
				return; 
			case MySeleniumPackage.STRING_PARAMETER:
				sequence_StringParameter(context, (StringParameter) semanticObject); 
				return; 
			case MySeleniumPackage.VARIABLE:
				sequence_Variable(context, (Variable) semanticObject); 
				return; 
			case MySeleniumPackage.VARIABLE_REF:
				sequence_VariableRef(context, (VariableRef) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     ActionParameter returns ActionParameterString
	 *     ActionParameterString returns ActionParameterString
	 *
	 * Constraint:
	 *     value=STRING
	 */
	protected void sequence_ActionParameterString(ISerializationContext context, ActionParameterString semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MySeleniumPackage.Literals.ACTION_PARAMETER_STRING__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MySeleniumPackage.Literals.ACTION_PARAMETER_STRING__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getActionParameterStringAccess().getValueSTRINGTerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Statement returns Action
	 *     Action returns Action
	 *
	 * Constraint:
	 *     (action=ActionType target=ActionTarget param=ActionParameter?)
	 */
	protected void sequence_Action(ISerializationContext context, fr.imta.clementdamien.dsl.selenium.mySelenium.Action semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Statement returns AssertContains
	 *     AssertContains returns AssertContains
	 *
	 * Constraint:
	 *     (container=AssertableElement element=AssertableElement)
	 */
	protected void sequence_AssertContains(ISerializationContext context, AssertContains semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MySeleniumPackage.Literals.ASSERT_CONTAINS__CONTAINER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MySeleniumPackage.Literals.ASSERT_CONTAINS__CONTAINER));
			if (transientValues.isValueTransient(semanticObject, MySeleniumPackage.Literals.ASSERT_CONTAINS__ELEMENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MySeleniumPackage.Literals.ASSERT_CONTAINS__ELEMENT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAssertContainsAccess().getContainerAssertableElementParserRuleCall_1_0(), semanticObject.getContainer());
		feeder.accept(grammarAccess.getAssertContainsAccess().getElementAssertableElementParserRuleCall_3_0(), semanticObject.getElement());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Statement returns AssertEquals
	 *     AssertEquals returns AssertEquals
	 *
	 * Constraint:
	 *     (assertableElement+=AssertableElement assertableElement+=AssertableElement)
	 */
	protected void sequence_AssertEquals(ISerializationContext context, AssertEquals semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Statement returns AssignAction
	 *     AssignAction returns AssignAction
	 *
	 * Constraint:
	 *     (target=ActionTarget variable=Variable)
	 */
	protected void sequence_AssignAction(ISerializationContext context, AssignAction semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MySeleniumPackage.Literals.ASSIGN_ACTION__TARGET) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MySeleniumPackage.Literals.ASSIGN_ACTION__TARGET));
			if (transientValues.isValueTransient(semanticObject, MySeleniumPackage.Literals.ASSIGN_ACTION__VARIABLE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MySeleniumPackage.Literals.ASSIGN_ACTION__VARIABLE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAssignActionAccess().getTargetActionTargetParserRuleCall_1_0(), semanticObject.getTarget());
		feeder.accept(grammarAccess.getAssignActionAccess().getVariableVariableParserRuleCall_2_0(), semanticObject.getVariable());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Attribute returns Attribute
	 *
	 * Constraint:
	 *     (name=DOMAttribute (value=STRING | variable=VariableRef))
	 */
	protected void sequence_Attribute(ISerializationContext context, Attribute semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Attributes returns Attributes
	 *
	 * Constraint:
	 *     (attrs+=Attribute attrs+=Attribute*)
	 */
	protected void sequence_Attributes(ISerializationContext context, Attributes semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FunctionCallParameters returns FunctionCallParameters
	 *
	 * Constraint:
	 *     (variables+=VariableCall variables+=VariableCall*)
	 */
	protected void sequence_FunctionCallParameters(ISerializationContext context, FunctionCallParameters semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FunctionCall returns FunctionCall
	 *     Statement returns FunctionCall
	 *     AssertableElement returns FunctionCall
	 *     ActionTarget returns FunctionCall
	 *
	 * Constraint:
	 *     (ref=[FunctionName|ID] params=FunctionCallParameters)
	 */
	protected void sequence_FunctionCall(ISerializationContext context, FunctionCall semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MySeleniumPackage.Literals.FUNCTION_CALL__REF) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MySeleniumPackage.Literals.FUNCTION_CALL__REF));
			if (transientValues.isValueTransient(semanticObject, MySeleniumPackage.Literals.FUNCTION_CALL__PARAMS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MySeleniumPackage.Literals.FUNCTION_CALL__PARAMS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFunctionCallAccess().getRefFunctionNameIDTerminalRuleCall_0_0_1(), semanticObject.eGet(MySeleniumPackage.Literals.FUNCTION_CALL__REF, false));
		feeder.accept(grammarAccess.getFunctionCallAccess().getParamsFunctionCallParametersParserRuleCall_1_0(), semanticObject.getParams());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     FunctionName returns FunctionName
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_FunctionName(ISerializationContext context, FunctionName semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MySeleniumPackage.Literals.FUNCTION_NAME__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MySeleniumPackage.Literals.FUNCTION_NAME__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFunctionNameAccess().getNameIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     FunctionParameters returns FunctionParameters
	 *
	 * Constraint:
	 *     (variables+=Variable variables+=Variable*)
	 */
	protected void sequence_FunctionParameters(ISerializationContext context, FunctionParameters semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Function returns Function
	 *
	 * Constraint:
	 *     (name=FunctionName params=FunctionParameters? statements=Statements)
	 */
	protected void sequence_Function(ISerializationContext context, Function semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Program returns Functions
	 *     Functions returns Functions
	 *
	 * Constraint:
	 *     (functions+=Function+ mainFunction=MainFunction)
	 */
	protected void sequence_Functions(ISerializationContext context, Functions semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MainFunction returns MainFunction
	 *
	 * Constraint:
	 *     statements=Statements
	 */
	protected void sequence_MainFunction(ISerializationContext context, MainFunction semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MySeleniumPackage.Literals.MAIN_FUNCTION__STATEMENTS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MySeleniumPackage.Literals.MAIN_FUNCTION__STATEMENTS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMainFunctionAccess().getStatementsStatementsParserRuleCall_3_0(), semanticObject.getStatements());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Statement returns NavigationAction
	 *     NavigationAction returns NavigationAction
	 *
	 * Constraint:
	 *     (action=NavigationActionType param=STRING)
	 */
	protected void sequence_NavigationAction(ISerializationContext context, NavigationAction semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MySeleniumPackage.Literals.NAVIGATION_ACTION__ACTION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MySeleniumPackage.Literals.NAVIGATION_ACTION__ACTION));
			if (transientValues.isValueTransient(semanticObject, MySeleniumPackage.Literals.NAVIGATION_ACTION__PARAM) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MySeleniumPackage.Literals.NAVIGATION_ACTION__PARAM));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNavigationActionAccess().getActionNavigationActionTypeParserRuleCall_0_0(), semanticObject.getAction());
		feeder.accept(grammarAccess.getNavigationActionAccess().getParamSTRINGTerminalRuleCall_1_0(), semanticObject.getParam());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Parent returns Parent
	 *
	 * Constraint:
	 *     (element=DOMElement attrs=Attributes?)
	 */
	protected void sequence_Parent(ISerializationContext context, Parent semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Projection returns Projection
	 *     AssertableElement returns Projection
	 *
	 * Constraint:
	 *     (selector=Selector projectionAction=ProjectionAction)
	 */
	protected void sequence_Projection(ISerializationContext context, Projection semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MySeleniumPackage.Literals.PROJECTION__SELECTOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MySeleniumPackage.Literals.PROJECTION__SELECTOR));
			if (transientValues.isValueTransient(semanticObject, MySeleniumPackage.Literals.PROJECTION__PROJECTION_ACTION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MySeleniumPackage.Literals.PROJECTION__PROJECTION_ACTION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getProjectionAccess().getSelectorSelectorParserRuleCall_0_0(), semanticObject.getSelector());
		feeder.accept(grammarAccess.getProjectionAccess().getProjectionActionProjectionActionParserRuleCall_2_0(), semanticObject.getProjectionAction());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ActionTarget returns Selector
	 *     ActionParameter returns Selector
	 *     Selector returns Selector
	 *
	 * Constraint:
	 *     (element=DOMElement attrs=Attributes? parent=Parent? all?='.all'?)
	 */
	protected void sequence_Selector(ISerializationContext context, Selector semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Program returns Statements
	 *     Statements returns Statements
	 *
	 * Constraint:
	 *     statements+=Statement+
	 */
	protected void sequence_Statements(ISerializationContext context, Statements semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AssertableElement returns StringParameter
	 *     VariableCall returns StringParameter
	 *     StringParameter returns StringParameter
	 *
	 * Constraint:
	 *     value=STRING
	 */
	protected void sequence_StringParameter(ISerializationContext context, StringParameter semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MySeleniumPackage.Literals.STRING_PARAMETER__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MySeleniumPackage.Literals.STRING_PARAMETER__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getStringParameterAccess().getValueSTRINGTerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ActionTarget returns VariableRef
	 *     ActionParameter returns VariableRef
	 *     VariableCall returns VariableRef
	 *     VariableRef returns VariableRef
	 *
	 * Constraint:
	 *     ref=[Variable|ID]
	 */
	protected void sequence_VariableRef(ISerializationContext context, VariableRef semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MySeleniumPackage.Literals.VARIABLE_REF__REF) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MySeleniumPackage.Literals.VARIABLE_REF__REF));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVariableRefAccess().getRefVariableIDTerminalRuleCall_0_1(), semanticObject.eGet(MySeleniumPackage.Literals.VARIABLE_REF__REF, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     AssertableElement returns Variable
	 *     Variable returns Variable
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_Variable(ISerializationContext context, Variable semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MySeleniumPackage.Literals.VARIABLE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MySeleniumPackage.Literals.VARIABLE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
}
