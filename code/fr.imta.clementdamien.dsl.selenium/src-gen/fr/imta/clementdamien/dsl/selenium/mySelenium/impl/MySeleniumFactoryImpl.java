/**
 * generated by Xtext 2.12.0
 */
package fr.imta.clementdamien.dsl.selenium.mySelenium.impl;

import fr.imta.clementdamien.dsl.selenium.mySelenium.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class MySeleniumFactoryImpl extends EFactoryImpl implements MySeleniumFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static MySeleniumFactory init()
  {
    try
    {
      MySeleniumFactory theMySeleniumFactory = (MySeleniumFactory)EPackage.Registry.INSTANCE.getEFactory(MySeleniumPackage.eNS_URI);
      if (theMySeleniumFactory != null)
      {
        return theMySeleniumFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new MySeleniumFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MySeleniumFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case MySeleniumPackage.PROGRAM: return createProgram();
      case MySeleniumPackage.FUNCTION: return createFunction();
      case MySeleniumPackage.FUNCTION_NAME: return createFunctionName();
      case MySeleniumPackage.FUNCTION_CALL: return createFunctionCall();
      case MySeleniumPackage.PROJECTION: return createProjection();
      case MySeleniumPackage.STATEMENT: return createStatement();
      case MySeleniumPackage.ASSERT_EQUALS: return createAssertEquals();
      case MySeleniumPackage.ASSERT_CONTAINS: return createAssertContains();
      case MySeleniumPackage.ASSERTABLE_ELEMENT: return createAssertableElement();
      case MySeleniumPackage.NAVIGATION_ACTION: return createNavigationAction();
      case MySeleniumPackage.ONE_PARAMETER_ACTION: return createOneParameterAction();
      case MySeleniumPackage.TWO_PARAMETERS_ACTION: return createTwoParametersAction();
      case MySeleniumPackage.SELECTOR: return createSelector();
      case MySeleniumPackage.ATTRIBUTES: return createAttributes();
      case MySeleniumPackage.ATTRIBUTE: return createAttribute();
      case MySeleniumPackage.FUNCTION_PARAMETERS: return createFunctionParameters();
      case MySeleniumPackage.FUNCTION_CALL_PARAMETERS: return createFunctionCallParameters();
      case MySeleniumPackage.VARIABLE_CALL: return createVariableCall();
      case MySeleniumPackage.VARIABLE: return createVariable();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Program createProgram()
  {
    ProgramImpl program = new ProgramImpl();
    return program;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Function createFunction()
  {
    FunctionImpl function = new FunctionImpl();
    return function;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FunctionName createFunctionName()
  {
    FunctionNameImpl functionName = new FunctionNameImpl();
    return functionName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FunctionCall createFunctionCall()
  {
    FunctionCallImpl functionCall = new FunctionCallImpl();
    return functionCall;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Projection createProjection()
  {
    ProjectionImpl projection = new ProjectionImpl();
    return projection;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Statement createStatement()
  {
    StatementImpl statement = new StatementImpl();
    return statement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AssertEquals createAssertEquals()
  {
    AssertEqualsImpl assertEquals = new AssertEqualsImpl();
    return assertEquals;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AssertContains createAssertContains()
  {
    AssertContainsImpl assertContains = new AssertContainsImpl();
    return assertContains;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AssertableElement createAssertableElement()
  {
    AssertableElementImpl assertableElement = new AssertableElementImpl();
    return assertableElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NavigationAction createNavigationAction()
  {
    NavigationActionImpl navigationAction = new NavigationActionImpl();
    return navigationAction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public OneParameterAction createOneParameterAction()
  {
    OneParameterActionImpl oneParameterAction = new OneParameterActionImpl();
    return oneParameterAction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TwoParametersAction createTwoParametersAction()
  {
    TwoParametersActionImpl twoParametersAction = new TwoParametersActionImpl();
    return twoParametersAction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Selector createSelector()
  {
    SelectorImpl selector = new SelectorImpl();
    return selector;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Attributes createAttributes()
  {
    AttributesImpl attributes = new AttributesImpl();
    return attributes;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Attribute createAttribute()
  {
    AttributeImpl attribute = new AttributeImpl();
    return attribute;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FunctionParameters createFunctionParameters()
  {
    FunctionParametersImpl functionParameters = new FunctionParametersImpl();
    return functionParameters;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FunctionCallParameters createFunctionCallParameters()
  {
    FunctionCallParametersImpl functionCallParameters = new FunctionCallParametersImpl();
    return functionCallParameters;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public VariableCall createVariableCall()
  {
    VariableCallImpl variableCall = new VariableCallImpl();
    return variableCall;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Variable createVariable()
  {
    VariableImpl variable = new VariableImpl();
    return variable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MySeleniumPackage getMySeleniumPackage()
  {
    return (MySeleniumPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static MySeleniumPackage getPackage()
  {
    return MySeleniumPackage.eINSTANCE;
  }

} //MySeleniumFactoryImpl
