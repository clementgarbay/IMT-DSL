/**
 * generated by Xtext 2.12.0
 */
package fr.imta.clementdamien.dsl.selenium.mySelenium.impl;

import fr.imta.clementdamien.dsl.selenium.mySelenium.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class MySeleniumFactoryImpl extends EFactoryImpl implements MySeleniumFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static MySeleniumFactory init()
  {
    try
    {
      MySeleniumFactory theMySeleniumFactory = (MySeleniumFactory)EPackage.Registry.INSTANCE.getEFactory(MySeleniumPackage.eNS_URI);
      if (theMySeleniumFactory != null)
      {
        return theMySeleniumFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new MySeleniumFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MySeleniumFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case MySeleniumPackage.PROGRAM: return createProgram();
      case MySeleniumPackage.FUNCTIONS: return createFunctions();
      case MySeleniumPackage.STATEMENTS: return createStatements();
      case MySeleniumPackage.MAIN_FUNCTION: return createMainFunction();
      case MySeleniumPackage.FUNCTION: return createFunction();
      case MySeleniumPackage.FUNCTION_NAME: return createFunctionName();
      case MySeleniumPackage.FUNCTION_CALL: return createFunctionCall();
      case MySeleniumPackage.PROJECTION: return createProjection();
      case MySeleniumPackage.STATEMENT: return createStatement();
      case MySeleniumPackage.ASSERT_EQUALS: return createAssertEquals();
      case MySeleniumPackage.ASSERT_CONTAINS: return createAssertContains();
      case MySeleniumPackage.ASSERTABLE_ELEMENT: return createAssertableElement();
      case MySeleniumPackage.NAVIGATION_ACTION: return createNavigationAction();
      case MySeleniumPackage.ACTION: return createAction();
      case MySeleniumPackage.ASSIGN_ACTION: return createAssignAction();
      case MySeleniumPackage.ACTION_TARGET: return createActionTarget();
      case MySeleniumPackage.ACTION_PARAMETER: return createActionParameter();
      case MySeleniumPackage.ACTION_PARAMETER_STRING: return createActionParameterString();
      case MySeleniumPackage.SELECTOR: return createSelector();
      case MySeleniumPackage.PARENT: return createParent();
      case MySeleniumPackage.ATTRIBUTES: return createAttributes();
      case MySeleniumPackage.ATTRIBUTE: return createAttribute();
      case MySeleniumPackage.FUNCTION_PARAMETERS: return createFunctionParameters();
      case MySeleniumPackage.FUNCTION_CALL_PARAMETERS: return createFunctionCallParameters();
      case MySeleniumPackage.VARIABLE_CALL: return createVariableCall();
      case MySeleniumPackage.VARIABLE_REF: return createVariableRef();
      case MySeleniumPackage.VARIABLE: return createVariable();
      case MySeleniumPackage.STRING_PARAMETER: return createStringParameter();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Program createProgram()
  {
    ProgramImpl program = new ProgramImpl();
    return program;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Functions createFunctions()
  {
    FunctionsImpl functions = new FunctionsImpl();
    return functions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Statements createStatements()
  {
    StatementsImpl statements = new StatementsImpl();
    return statements;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MainFunction createMainFunction()
  {
    MainFunctionImpl mainFunction = new MainFunctionImpl();
    return mainFunction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Function createFunction()
  {
    FunctionImpl function = new FunctionImpl();
    return function;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FunctionName createFunctionName()
  {
    FunctionNameImpl functionName = new FunctionNameImpl();
    return functionName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FunctionCall createFunctionCall()
  {
    FunctionCallImpl functionCall = new FunctionCallImpl();
    return functionCall;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Projection createProjection()
  {
    ProjectionImpl projection = new ProjectionImpl();
    return projection;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Statement createStatement()
  {
    StatementImpl statement = new StatementImpl();
    return statement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AssertEquals createAssertEquals()
  {
    AssertEqualsImpl assertEquals = new AssertEqualsImpl();
    return assertEquals;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AssertContains createAssertContains()
  {
    AssertContainsImpl assertContains = new AssertContainsImpl();
    return assertContains;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AssertableElement createAssertableElement()
  {
    AssertableElementImpl assertableElement = new AssertableElementImpl();
    return assertableElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NavigationAction createNavigationAction()
  {
    NavigationActionImpl navigationAction = new NavigationActionImpl();
    return navigationAction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Action createAction()
  {
    ActionImpl action = new ActionImpl();
    return action;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AssignAction createAssignAction()
  {
    AssignActionImpl assignAction = new AssignActionImpl();
    return assignAction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ActionTarget createActionTarget()
  {
    ActionTargetImpl actionTarget = new ActionTargetImpl();
    return actionTarget;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ActionParameter createActionParameter()
  {
    ActionParameterImpl actionParameter = new ActionParameterImpl();
    return actionParameter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ActionParameterString createActionParameterString()
  {
    ActionParameterStringImpl actionParameterString = new ActionParameterStringImpl();
    return actionParameterString;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Selector createSelector()
  {
    SelectorImpl selector = new SelectorImpl();
    return selector;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Parent createParent()
  {
    ParentImpl parent = new ParentImpl();
    return parent;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Attributes createAttributes()
  {
    AttributesImpl attributes = new AttributesImpl();
    return attributes;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Attribute createAttribute()
  {
    AttributeImpl attribute = new AttributeImpl();
    return attribute;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FunctionParameters createFunctionParameters()
  {
    FunctionParametersImpl functionParameters = new FunctionParametersImpl();
    return functionParameters;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FunctionCallParameters createFunctionCallParameters()
  {
    FunctionCallParametersImpl functionCallParameters = new FunctionCallParametersImpl();
    return functionCallParameters;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public VariableCall createVariableCall()
  {
    VariableCallImpl variableCall = new VariableCallImpl();
    return variableCall;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public VariableRef createVariableRef()
  {
    VariableRefImpl variableRef = new VariableRefImpl();
    return variableRef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Variable createVariable()
  {
    VariableImpl variable = new VariableImpl();
    return variable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public StringParameter createStringParameter()
  {
    StringParameterImpl stringParameter = new StringParameterImpl();
    return stringParameter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MySeleniumPackage getMySeleniumPackage()
  {
    return (MySeleniumPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static MySeleniumPackage getPackage()
  {
    return MySeleniumPackage.eINSTANCE;
  }

} //MySeleniumFactoryImpl
