/**
 * generated by Xtext 2.12.0
 */
package fr.imta.clementdamien.dsl.selenium.mySelenium.impl;

import fr.imta.clementdamien.dsl.selenium.mySelenium.AssertEquals;
import fr.imta.clementdamien.dsl.selenium.mySelenium.AssertableElement;
import fr.imta.clementdamien.dsl.selenium.mySelenium.MySeleniumPackage;

import java.util.Collection;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Assert Equals</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link fr.imta.clementdamien.dsl.selenium.mySelenium.impl.AssertEqualsImpl#getAssertableElement <em>Assertable Element</em>}</li>
 * </ul>
 *
 * @generated
 */
public class AssertEqualsImpl extends StatementImpl implements AssertEquals
{
  /**
   * The cached value of the '{@link #getAssertableElement() <em>Assertable Element</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAssertableElement()
   * @generated
   * @ordered
   */
  protected EList<AssertableElement> assertableElement;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected AssertEqualsImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MySeleniumPackage.Literals.ASSERT_EQUALS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<AssertableElement> getAssertableElement()
  {
    if (assertableElement == null)
    {
      assertableElement = new EObjectContainmentEList<AssertableElement>(AssertableElement.class, this, MySeleniumPackage.ASSERT_EQUALS__ASSERTABLE_ELEMENT);
    }
    return assertableElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MySeleniumPackage.ASSERT_EQUALS__ASSERTABLE_ELEMENT:
        return ((InternalEList<?>)getAssertableElement()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MySeleniumPackage.ASSERT_EQUALS__ASSERTABLE_ELEMENT:
        return getAssertableElement();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MySeleniumPackage.ASSERT_EQUALS__ASSERTABLE_ELEMENT:
        getAssertableElement().clear();
        getAssertableElement().addAll((Collection<? extends AssertableElement>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MySeleniumPackage.ASSERT_EQUALS__ASSERTABLE_ELEMENT:
        getAssertableElement().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MySeleniumPackage.ASSERT_EQUALS__ASSERTABLE_ELEMENT:
        return assertableElement != null && !assertableElement.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //AssertEqualsImpl
