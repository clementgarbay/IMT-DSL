/*
 * generated by Xtext 2.12.0
 */
grammar InternalMySelenium;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package fr.imta.clementdamien.dsl.selenium.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package fr.imta.clementdamien.dsl.selenium.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import fr.imta.clementdamien.dsl.selenium.services.MySeleniumGrammarAccess;

}

@parser::members {

 	private MySeleniumGrammarAccess grammarAccess;

    public InternalMySeleniumParser(TokenStream input, MySeleniumGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Program";
   	}

   	@Override
   	protected MySeleniumGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleProgram
entryRuleProgram returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProgramRule()); }
	iv_ruleProgram=ruleProgram
	{ $current=$iv_ruleProgram.current; }
	EOF;

// Rule Program
ruleProgram returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getProgramAccess().getStatementsParserRuleCall_0());
		}
		this_Statements_0=ruleStatements
		{
			$current = $this_Statements_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getProgramAccess().getFunctionsParserRuleCall_1());
		}
		this_Functions_1=ruleFunctions
		{
			$current = $this_Functions_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleFunctions
entryRuleFunctions returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunctionsRule()); }
	iv_ruleFunctions=ruleFunctions
	{ $current=$iv_ruleFunctions.current; }
	EOF;

// Rule Functions
ruleFunctions returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getFunctionsAccess().getFunctionsFunctionParserRuleCall_0_0());
				}
				lv_functions_0_0=ruleFunction
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunctionsRule());
					}
					add(
						$current,
						"functions",
						lv_functions_0_0,
						"fr.imta.clementdamien.dsl.selenium.MySelenium.Function");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		(
			(
				{
					newCompositeNode(grammarAccess.getFunctionsAccess().getMainFunctionMainFunctionParserRuleCall_1_0());
				}
				lv_mainFunction_1_0=ruleMainFunction
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunctionsRule());
					}
					set(
						$current,
						"mainFunction",
						lv_mainFunction_1_0,
						"fr.imta.clementdamien.dsl.selenium.MySelenium.MainFunction");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleStatements
entryRuleStatements returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStatementsRule()); }
	iv_ruleStatements=ruleStatements
	{ $current=$iv_ruleStatements.current; }
	EOF;

// Rule Statements
ruleStatements returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getStatementsAccess().getStatementsStatementParserRuleCall_0());
			}
			lv_statements_0_0=ruleStatement
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getStatementsRule());
				}
				add(
					$current,
					"statements",
					lv_statements_0_0,
					"fr.imta.clementdamien.dsl.selenium.MySelenium.Statement");
				afterParserOrEnumRuleCall();
			}
		)
	)+
;

// Entry rule entryRuleMainFunction
entryRuleMainFunction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMainFunctionRule()); }
	iv_ruleMainFunction=ruleMainFunction
	{ $current=$iv_ruleMainFunction.current; }
	EOF;

// Rule MainFunction
ruleMainFunction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='def'
		{
			newLeafNode(otherlv_0, grammarAccess.getMainFunctionAccess().getDefKeyword_0());
		}
		otherlv_1='main'
		{
			newLeafNode(otherlv_1, grammarAccess.getMainFunctionAccess().getMainKeyword_1());
		}
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getMainFunctionAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMainFunctionAccess().getStatementsStatementsParserRuleCall_3_0());
				}
				lv_statements_3_0=ruleStatements
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMainFunctionRule());
					}
					set(
						$current,
						"statements",
						lv_statements_3_0,
						"fr.imta.clementdamien.dsl.selenium.MySelenium.Statements");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getMainFunctionAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleFunction
entryRuleFunction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunctionRule()); }
	iv_ruleFunction=ruleFunction
	{ $current=$iv_ruleFunction.current; }
	EOF;

// Rule Function
ruleFunction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='def'
		{
			newLeafNode(otherlv_0, grammarAccess.getFunctionAccess().getDefKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFunctionAccess().getNameFunctionNameParserRuleCall_1_0());
				}
				lv_name_1_0=ruleFunctionName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunctionRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"fr.imta.clementdamien.dsl.selenium.MySelenium.FunctionName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getFunctionAccess().getParamsFunctionParametersParserRuleCall_2_0());
				}
				lv_params_2_0=ruleFunctionParameters
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunctionRule());
					}
					set(
						$current,
						"params",
						lv_params_2_0,
						"fr.imta.clementdamien.dsl.selenium.MySelenium.FunctionParameters");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_3='{'
		{
			newLeafNode(otherlv_3, grammarAccess.getFunctionAccess().getLeftCurlyBracketKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFunctionAccess().getStatementsStatementsParserRuleCall_4_0());
				}
				lv_statements_4_0=ruleStatements
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunctionRule());
					}
					set(
						$current,
						"statements",
						lv_statements_4_0,
						"fr.imta.clementdamien.dsl.selenium.MySelenium.Statements");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5='}'
		{
			newLeafNode(otherlv_5, grammarAccess.getFunctionAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleFunctionName
entryRuleFunctionName returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunctionNameRule()); }
	iv_ruleFunctionName=ruleFunctionName
	{ $current=$iv_ruleFunctionName.current; }
	EOF;

// Rule FunctionName
ruleFunctionName returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0=RULE_ID
			{
				newLeafNode(lv_name_0_0, grammarAccess.getFunctionNameAccess().getNameIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getFunctionNameRule());
				}
				setWithLastConsumed(
					$current,
					"name",
					lv_name_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

// Entry rule entryRuleFunctionCall
entryRuleFunctionCall returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunctionCallRule()); }
	iv_ruleFunctionCall=ruleFunctionCall
	{ $current=$iv_ruleFunctionCall.current; }
	EOF;

// Rule FunctionCall
ruleFunctionCall returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFunctionCallRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getFunctionCallAccess().getRefFunctionNameCrossReference_0_0());
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getFunctionCallAccess().getParamsFunctionCallParametersParserRuleCall_1_0());
				}
				lv_params_1_0=ruleFunctionCallParameters
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunctionCallRule());
					}
					set(
						$current,
						"params",
						lv_params_1_0,
						"fr.imta.clementdamien.dsl.selenium.MySelenium.FunctionCallParameters");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleProjection
entryRuleProjection returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProjectionRule()); }
	iv_ruleProjection=ruleProjection
	{ $current=$iv_ruleProjection.current; }
	EOF;

// Rule Projection
ruleProjection returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getProjectionAccess().getSelectorSelectorParserRuleCall_0_0());
				}
				lv_selector_0_0=ruleSelector
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProjectionRule());
					}
					set(
						$current,
						"selector",
						lv_selector_0_0,
						"fr.imta.clementdamien.dsl.selenium.MySelenium.Selector");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='.'
		{
			newLeafNode(otherlv_1, grammarAccess.getProjectionAccess().getFullStopKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getProjectionAccess().getProjectionActionProjectionActionParserRuleCall_2_0());
				}
				lv_projectionAction_2_0=ruleProjectionAction
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProjectionRule());
					}
					set(
						$current,
						"projectionAction",
						lv_projectionAction_2_0,
						"fr.imta.clementdamien.dsl.selenium.MySelenium.ProjectionAction");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleProjectionAction
entryRuleProjectionAction returns [String current=null]:
	{ newCompositeNode(grammarAccess.getProjectionActionRule()); }
	iv_ruleProjectionAction=ruleProjectionAction
	{ $current=$iv_ruleProjectionAction.current.getText(); }
	EOF;

// Rule ProjectionAction
ruleProjectionAction returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='value'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getProjectionActionAccess().getValueKeyword_0());
		}
		    |
		kw='text'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getProjectionActionAccess().getTextKeyword_1());
		}
		    |
		kw='html'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getProjectionActionAccess().getHtmlKeyword_2());
		}
	)
;

// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	iv_ruleStatement=ruleStatement
	{ $current=$iv_ruleStatement.current; }
	EOF;

// Rule Statement
ruleStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getStatementAccess().getActionParserRuleCall_0());
		}
		this_Action_0=ruleAction
		{
			$current = $this_Action_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getAssignActionParserRuleCall_1());
		}
		this_AssignAction_1=ruleAssignAction
		{
			$current = $this_AssignAction_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getFunctionCallParserRuleCall_2());
		}
		this_FunctionCall_2=ruleFunctionCall
		{
			$current = $this_FunctionCall_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getAssertEqualsParserRuleCall_3());
		}
		this_AssertEquals_3=ruleAssertEquals
		{
			$current = $this_AssertEquals_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getAssertContainsParserRuleCall_4());
		}
		this_AssertContains_4=ruleAssertContains
		{
			$current = $this_AssertContains_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getNavigationActionParserRuleCall_5());
		}
		this_NavigationAction_5=ruleNavigationAction
		{
			$current = $this_NavigationAction_5.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleAssertEquals
entryRuleAssertEquals returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAssertEqualsRule()); }
	iv_ruleAssertEquals=ruleAssertEquals
	{ $current=$iv_ruleAssertEquals.current; }
	EOF;

// Rule AssertEquals
ruleAssertEquals returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='assert'
		{
			newLeafNode(otherlv_0, grammarAccess.getAssertEqualsAccess().getAssertKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAssertEqualsAccess().getAssertableElementAssertableElementParserRuleCall_1_0());
				}
				lv_assertableElement_1_0=ruleAssertableElement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAssertEqualsRule());
					}
					add(
						$current,
						"assertableElement",
						lv_assertableElement_1_0,
						"fr.imta.clementdamien.dsl.selenium.MySelenium.AssertableElement");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='='
		{
			newLeafNode(otherlv_2, grammarAccess.getAssertEqualsAccess().getEqualsSignKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAssertEqualsAccess().getAssertableElementAssertableElementParserRuleCall_3_0());
				}
				lv_assertableElement_3_0=ruleAssertableElement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAssertEqualsRule());
					}
					add(
						$current,
						"assertableElement",
						lv_assertableElement_3_0,
						"fr.imta.clementdamien.dsl.selenium.MySelenium.AssertableElement");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleAssertContains
entryRuleAssertContains returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAssertContainsRule()); }
	iv_ruleAssertContains=ruleAssertContains
	{ $current=$iv_ruleAssertContains.current; }
	EOF;

// Rule AssertContains
ruleAssertContains returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='assert'
		{
			newLeafNode(otherlv_0, grammarAccess.getAssertContainsAccess().getAssertKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAssertContainsAccess().getContainerAssertableElementParserRuleCall_1_0());
				}
				lv_container_1_0=ruleAssertableElement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAssertContainsRule());
					}
					set(
						$current,
						"container",
						lv_container_1_0,
						"fr.imta.clementdamien.dsl.selenium.MySelenium.AssertableElement");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='contains'
		{
			newLeafNode(otherlv_2, grammarAccess.getAssertContainsAccess().getContainsKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAssertContainsAccess().getElementAssertableElementParserRuleCall_3_0());
				}
				lv_element_3_0=ruleAssertableElement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAssertContainsRule());
					}
					set(
						$current,
						"element",
						lv_element_3_0,
						"fr.imta.clementdamien.dsl.selenium.MySelenium.AssertableElement");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleAssertableElement
entryRuleAssertableElement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAssertableElementRule()); }
	iv_ruleAssertableElement=ruleAssertableElement
	{ $current=$iv_ruleAssertableElement.current; }
	EOF;

// Rule AssertableElement
ruleAssertableElement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAssertableElementAccess().getVariableParserRuleCall_0());
		}
		this_Variable_0=ruleVariable
		{
			$current = $this_Variable_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAssertableElementAccess().getStringParameterParserRuleCall_1());
		}
		this_StringParameter_1=ruleStringParameter
		{
			$current = $this_StringParameter_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAssertableElementAccess().getProjectionParserRuleCall_2());
		}
		this_Projection_2=ruleProjection
		{
			$current = $this_Projection_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAssertableElementAccess().getFunctionCallParserRuleCall_3());
		}
		this_FunctionCall_3=ruleFunctionCall
		{
			$current = $this_FunctionCall_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleNavigationAction
entryRuleNavigationAction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNavigationActionRule()); }
	iv_ruleNavigationAction=ruleNavigationAction
	{ $current=$iv_ruleNavigationAction.current; }
	EOF;

// Rule NavigationAction
ruleNavigationAction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getNavigationActionAccess().getActionNavigationActionTypeParserRuleCall_0_0());
				}
				lv_action_0_0=ruleNavigationActionType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNavigationActionRule());
					}
					set(
						$current,
						"action",
						lv_action_0_0,
						"fr.imta.clementdamien.dsl.selenium.MySelenium.NavigationActionType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_param_1_0=RULE_STRING
				{
					newLeafNode(lv_param_1_0, grammarAccess.getNavigationActionAccess().getParamSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getNavigationActionRule());
					}
					setWithLastConsumed(
						$current,
						"param",
						lv_param_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleNavigationActionType
entryRuleNavigationActionType returns [String current=null]:
	{ newCompositeNode(grammarAccess.getNavigationActionTypeRule()); }
	iv_ruleNavigationActionType=ruleNavigationActionType
	{ $current=$iv_ruleNavigationActionType.current.getText(); }
	EOF;

// Rule NavigationActionType
ruleNavigationActionType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='go'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getNavigationActionTypeAccess().getGoKeyword_0());
		}
		    |
		kw='openBrowser'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getNavigationActionTypeAccess().getOpenBrowserKeyword_1());
		}
	)
;

// Entry rule entryRuleAction
entryRuleAction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getActionRule()); }
	iv_ruleAction=ruleAction
	{ $current=$iv_ruleAction.current; }
	EOF;

// Rule Action
ruleAction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getActionAccess().getActionActionTypeParserRuleCall_0_0());
				}
				lv_action_0_0=ruleActionType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getActionRule());
					}
					set(
						$current,
						"action",
						lv_action_0_0,
						"fr.imta.clementdamien.dsl.selenium.MySelenium.ActionType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getActionAccess().getTargetActionTargetParserRuleCall_1_0());
				}
				lv_target_1_0=ruleActionTarget
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getActionRule());
					}
					set(
						$current,
						"target",
						lv_target_1_0,
						"fr.imta.clementdamien.dsl.selenium.MySelenium.ActionTarget");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getActionAccess().getParamActionParameterParserRuleCall_2_0());
				}
				lv_param_2_0=ruleActionParameter
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getActionRule());
					}
					set(
						$current,
						"param",
						lv_param_2_0,
						"fr.imta.clementdamien.dsl.selenium.MySelenium.ActionParameter");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleAssignAction
entryRuleAssignAction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAssignActionRule()); }
	iv_ruleAssignAction=ruleAssignAction
	{ $current=$iv_ruleAssignAction.current; }
	EOF;

// Rule AssignAction
ruleAssignAction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='assign'
		{
			newLeafNode(otherlv_0, grammarAccess.getAssignActionAccess().getAssignKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAssignActionAccess().getTargetActionTargetParserRuleCall_1_0());
				}
				lv_target_1_0=ruleActionTarget
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAssignActionRule());
					}
					set(
						$current,
						"target",
						lv_target_1_0,
						"fr.imta.clementdamien.dsl.selenium.MySelenium.ActionTarget");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getAssignActionAccess().getVariableVariableParserRuleCall_2_0());
				}
				lv_variable_2_0=ruleVariable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAssignActionRule());
					}
					set(
						$current,
						"variable",
						lv_variable_2_0,
						"fr.imta.clementdamien.dsl.selenium.MySelenium.Variable");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleActionTarget
entryRuleActionTarget returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getActionTargetRule()); }
	iv_ruleActionTarget=ruleActionTarget
	{ $current=$iv_ruleActionTarget.current; }
	EOF;

// Rule ActionTarget
ruleActionTarget returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getActionTargetAccess().getSelectorParserRuleCall_0());
		}
		this_Selector_0=ruleSelector
		{
			$current = $this_Selector_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getActionTargetAccess().getVariableRefParserRuleCall_1());
		}
		this_VariableRef_1=ruleVariableRef
		{
			$current = $this_VariableRef_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getActionTargetAccess().getFunctionCallParserRuleCall_2());
		}
		this_FunctionCall_2=ruleFunctionCall
		{
			$current = $this_FunctionCall_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleActionParameter
entryRuleActionParameter returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getActionParameterRule()); }
	iv_ruleActionParameter=ruleActionParameter
	{ $current=$iv_ruleActionParameter.current; }
	EOF;

// Rule ActionParameter
ruleActionParameter returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getActionParameterAccess().getSelectorParserRuleCall_0());
		}
		this_Selector_0=ruleSelector
		{
			$current = $this_Selector_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getActionParameterAccess().getActionParameterStringParserRuleCall_1());
		}
		this_ActionParameterString_1=ruleActionParameterString
		{
			$current = $this_ActionParameterString_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getActionParameterAccess().getVariableRefParserRuleCall_2());
		}
		this_VariableRef_2=ruleVariableRef
		{
			$current = $this_VariableRef_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleActionParameterString
entryRuleActionParameterString returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getActionParameterStringRule()); }
	iv_ruleActionParameterString=ruleActionParameterString
	{ $current=$iv_ruleActionParameterString.current; }
	EOF;

// Rule ActionParameterString
ruleActionParameterString returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_value_0_0=RULE_STRING
			{
				newLeafNode(lv_value_0_0, grammarAccess.getActionParameterStringAccess().getValueSTRINGTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getActionParameterStringRule());
				}
				setWithLastConsumed(
					$current,
					"value",
					lv_value_0_0,
					"org.eclipse.xtext.common.Terminals.STRING");
			}
		)
	)
;

// Entry rule entryRuleSelector
entryRuleSelector returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSelectorRule()); }
	iv_ruleSelector=ruleSelector
	{ $current=$iv_ruleSelector.current; }
	EOF;

// Rule Selector
ruleSelector returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getSelectorAccess().getElementDOMElementParserRuleCall_0_0());
				}
				lv_element_0_0=ruleDOMElement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSelectorRule());
					}
					set(
						$current,
						"element",
						lv_element_0_0,
						"fr.imta.clementdamien.dsl.selenium.MySelenium.DOMElement");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='['
		{
			newLeafNode(otherlv_1, grammarAccess.getSelectorAccess().getLeftSquareBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSelectorAccess().getAttrsAttributesParserRuleCall_2_0());
				}
				lv_attrs_2_0=ruleAttributes
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSelectorRule());
					}
					set(
						$current,
						"attrs",
						lv_attrs_2_0,
						"fr.imta.clementdamien.dsl.selenium.MySelenium.Attributes");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_3=']'
		{
			newLeafNode(otherlv_3, grammarAccess.getSelectorAccess().getRightSquareBracketKeyword_3());
		}
		(
			otherlv_4='.parent'
			{
				newLeafNode(otherlv_4, grammarAccess.getSelectorAccess().getParentKeyword_4_0());
			}
			otherlv_5='('
			{
				newLeafNode(otherlv_5, grammarAccess.getSelectorAccess().getLeftParenthesisKeyword_4_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSelectorAccess().getParentParentParserRuleCall_4_2_0());
					}
					lv_parent_6_0=ruleParent
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSelectorRule());
						}
						set(
							$current,
							"parent",
							lv_parent_6_0,
							"fr.imta.clementdamien.dsl.selenium.MySelenium.Parent");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_7=')'
			{
				newLeafNode(otherlv_7, grammarAccess.getSelectorAccess().getRightParenthesisKeyword_4_3());
			}
		)?
		(
			(
				lv_all_8_0='.all'
				{
					newLeafNode(lv_all_8_0, grammarAccess.getSelectorAccess().getAllAllKeyword_5_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSelectorRule());
					}
					setWithLastConsumed($current, "all", true, ".all");
				}
			)
		)?
	)
;

// Entry rule entryRuleParent
entryRuleParent returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParentRule()); }
	iv_ruleParent=ruleParent
	{ $current=$iv_ruleParent.current; }
	EOF;

// Rule Parent
ruleParent returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getParentAccess().getElementDOMElementParserRuleCall_0_0());
				}
				lv_element_0_0=ruleDOMElement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getParentRule());
					}
					set(
						$current,
						"element",
						lv_element_0_0,
						"fr.imta.clementdamien.dsl.selenium.MySelenium.DOMElement");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='['
		{
			newLeafNode(otherlv_1, grammarAccess.getParentAccess().getLeftSquareBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getParentAccess().getAttrsAttributesParserRuleCall_2_0());
				}
				lv_attrs_2_0=ruleAttributes
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getParentRule());
					}
					set(
						$current,
						"attrs",
						lv_attrs_2_0,
						"fr.imta.clementdamien.dsl.selenium.MySelenium.Attributes");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_3=']'
		{
			newLeafNode(otherlv_3, grammarAccess.getParentAccess().getRightSquareBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleAttributes
entryRuleAttributes returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAttributesRule()); }
	iv_ruleAttributes=ruleAttributes
	{ $current=$iv_ruleAttributes.current; }
	EOF;

// Rule Attributes
ruleAttributes returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getAttributesAccess().getAttrsAttributeParserRuleCall_0_0());
				}
				lv_attrs_0_0=ruleAttribute
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAttributesRule());
					}
					add(
						$current,
						"attrs",
						lv_attrs_0_0,
						"fr.imta.clementdamien.dsl.selenium.MySelenium.Attribute");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1=','
			{
				newLeafNode(otherlv_1, grammarAccess.getAttributesAccess().getCommaKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAttributesAccess().getAttrsAttributeParserRuleCall_1_1_0());
					}
					lv_attrs_2_0=ruleAttribute
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAttributesRule());
						}
						add(
							$current,
							"attrs",
							lv_attrs_2_0,
							"fr.imta.clementdamien.dsl.selenium.MySelenium.Attribute");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleAttribute
entryRuleAttribute returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAttributeRule()); }
	iv_ruleAttribute=ruleAttribute
	{ $current=$iv_ruleAttribute.current; }
	EOF;

// Rule Attribute
ruleAttribute returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getAttributeAccess().getNameDOMAttributeParserRuleCall_0_0());
				}
				lv_name_0_0=ruleDOMAttribute
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAttributeRule());
					}
					set(
						$current,
						"name",
						lv_name_0_0,
						"fr.imta.clementdamien.dsl.selenium.MySelenium.DOMAttribute");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='='
		{
			newLeafNode(otherlv_1, grammarAccess.getAttributeAccess().getEqualsSignKeyword_1());
		}
		(
			(
				(
					lv_value_2_0=RULE_STRING
					{
						newLeafNode(lv_value_2_0, grammarAccess.getAttributeAccess().getValueSTRINGTerminalRuleCall_2_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAttributeRule());
						}
						setWithLastConsumed(
							$current,
							"value",
							lv_value_2_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getAttributeAccess().getVariableVariableRefParserRuleCall_2_1_0());
					}
					lv_variable_3_0=ruleVariableRef
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAttributeRule());
						}
						set(
							$current,
							"variable",
							lv_variable_3_0,
							"fr.imta.clementdamien.dsl.selenium.MySelenium.VariableRef");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleDOMAttribute
entryRuleDOMAttribute returns [String current=null]:
	{ newCompositeNode(grammarAccess.getDOMAttributeRule()); }
	iv_ruleDOMAttribute=ruleDOMAttribute
	{ $current=$iv_ruleDOMAttribute.current.getText(); }
	EOF;

// Rule DOMAttribute
ruleDOMAttribute returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='name'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getDOMAttributeAccess().getNameKeyword_0());
		}
		    |
		kw='text'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getDOMAttributeAccess().getTextKeyword_1());
		}
		    |
		kw='alt'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getDOMAttributeAccess().getAltKeyword_2());
		}
		    |
		kw='checked'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getDOMAttributeAccess().getCheckedKeyword_3());
		}
		    |
		kw='class'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getDOMAttributeAccess().getClassKeyword_4());
		}
		    |
		kw='id'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getDOMAttributeAccess().getIdKeyword_5());
		}
		    |
		kw='type'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getDOMAttributeAccess().getTypeKeyword_6());
		}
		    |
		kw='value'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getDOMAttributeAccess().getValueKeyword_7());
		}
	)
;

// Entry rule entryRuleDOMElement
entryRuleDOMElement returns [String current=null]:
	{ newCompositeNode(grammarAccess.getDOMElementRule()); }
	iv_ruleDOMElement=ruleDOMElement
	{ $current=$iv_ruleDOMElement.current.getText(); }
	EOF;

// Rule DOMElement
ruleDOMElement returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='link'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getDOMElementAccess().getLinkKeyword_0());
		}
		    |
		kw='button'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getDOMElementAccess().getButtonKeyword_1());
		}
		    |
		kw='checkbox'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getDOMElementAccess().getCheckboxKeyword_2());
		}
		    |
		kw='input'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getDOMElementAccess().getInputKeyword_3());
		}
		    |
		kw='h1'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getDOMElementAccess().getH1Keyword_4());
		}
		    |
		kw='body'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getDOMElementAccess().getBodyKeyword_5());
		}
		    |
		kw='select'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getDOMElementAccess().getSelectKeyword_6());
		}
		    |
		kw='a'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getDOMElementAccess().getAKeyword_7());
		}
		    |
		kw='img'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getDOMElementAccess().getImgKeyword_8());
		}
		    |
		kw='div'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getDOMElementAccess().getDivKeyword_9());
		}
	)
;

// Entry rule entryRuleActionType
entryRuleActionType returns [String current=null]:
	{ newCompositeNode(grammarAccess.getActionTypeRule()); }
	iv_ruleActionType=ruleActionType
	{ $current=$iv_ruleActionType.current.getText(); }
	EOF;

// Rule ActionType
ruleActionType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='click'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getActionTypeAccess().getClickKeyword_0());
		}
		    |
		kw='fill'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getActionTypeAccess().getFillKeyword_1());
		}
		    |
		kw='choose'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getActionTypeAccess().getChooseKeyword_2());
		}
		    |
		kw='count'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getActionTypeAccess().getCountKeyword_3());
		}
	)
;

// Entry rule entryRuleFunctionParameters
entryRuleFunctionParameters returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunctionParametersRule()); }
	iv_ruleFunctionParameters=ruleFunctionParameters
	{ $current=$iv_ruleFunctionParameters.current; }
	EOF;

// Rule FunctionParameters
ruleFunctionParameters returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getFunctionParametersAccess().getLeftParenthesisKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFunctionParametersAccess().getVariablesVariableParserRuleCall_1_0());
				}
				lv_variables_1_0=ruleVariable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunctionParametersRule());
					}
					add(
						$current,
						"variables",
						lv_variables_1_0,
						"fr.imta.clementdamien.dsl.selenium.MySelenium.Variable");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2=','
			{
				newLeafNode(otherlv_2, grammarAccess.getFunctionParametersAccess().getCommaKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getFunctionParametersAccess().getVariablesVariableParserRuleCall_2_1_0());
					}
					lv_variables_3_0=ruleVariable
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFunctionParametersRule());
						}
						add(
							$current,
							"variables",
							lv_variables_3_0,
							"fr.imta.clementdamien.dsl.selenium.MySelenium.Variable");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getFunctionParametersAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleFunctionCallParameters
entryRuleFunctionCallParameters returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunctionCallParametersRule()); }
	iv_ruleFunctionCallParameters=ruleFunctionCallParameters
	{ $current=$iv_ruleFunctionCallParameters.current; }
	EOF;

// Rule FunctionCallParameters
ruleFunctionCallParameters returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getFunctionCallParametersAccess().getLeftParenthesisKeyword_0());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getFunctionCallParametersAccess().getVariablesVariableCallParserRuleCall_1_0_0());
					}
					lv_variables_1_0=ruleVariableCall
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFunctionCallParametersRule());
						}
						add(
							$current,
							"variables",
							lv_variables_1_0,
							"fr.imta.clementdamien.dsl.selenium.MySelenium.VariableCall");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_2=','
				{
					newLeafNode(otherlv_2, grammarAccess.getFunctionCallParametersAccess().getCommaKeyword_1_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getFunctionCallParametersAccess().getVariablesVariableCallParserRuleCall_1_1_1_0());
						}
						lv_variables_3_0=ruleVariableCall
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getFunctionCallParametersRule());
							}
							add(
								$current,
								"variables",
								lv_variables_3_0,
								"fr.imta.clementdamien.dsl.selenium.MySelenium.VariableCall");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getFunctionCallParametersAccess().getRightParenthesisKeyword_2());
		}
	)
;

// Entry rule entryRuleVariableCall
entryRuleVariableCall returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableCallRule()); }
	iv_ruleVariableCall=ruleVariableCall
	{ $current=$iv_ruleVariableCall.current; }
	EOF;

// Rule VariableCall
ruleVariableCall returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getVariableCallAccess().getVariableRefParserRuleCall_0());
		}
		this_VariableRef_0=ruleVariableRef
		{
			$current = $this_VariableRef_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getVariableCallAccess().getStringParameterParserRuleCall_1());
		}
		this_StringParameter_1=ruleStringParameter
		{
			$current = $this_StringParameter_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleVariableRef
entryRuleVariableRef returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableRefRule()); }
	iv_ruleVariableRef=ruleVariableRef
	{ $current=$iv_ruleVariableRef.current; }
	EOF;

// Rule VariableRef
ruleVariableRef returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getVariableRefRule());
				}
			}
			otherlv_0=RULE_ID
			{
				newLeafNode(otherlv_0, grammarAccess.getVariableRefAccess().getRefVariableCrossReference_0());
			}
		)
	)
;

// Entry rule entryRuleVariable
entryRuleVariable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableRule()); }
	iv_ruleVariable=ruleVariable
	{ $current=$iv_ruleVariable.current; }
	EOF;

// Rule Variable
ruleVariable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0=RULE_ID
			{
				newLeafNode(lv_name_0_0, grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getVariableRule());
				}
				setWithLastConsumed(
					$current,
					"name",
					lv_name_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

// Entry rule entryRuleStringParameter
entryRuleStringParameter returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStringParameterRule()); }
	iv_ruleStringParameter=ruleStringParameter
	{ $current=$iv_ruleStringParameter.current; }
	EOF;

// Rule StringParameter
ruleStringParameter returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_value_0_0=RULE_STRING
			{
				newLeafNode(lv_value_0_0, grammarAccess.getStringParameterAccess().getValueSTRINGTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getStringParameterRule());
				}
				setWithLastConsumed(
					$current,
					"value",
					lv_value_0_0,
					"org.eclipse.xtext.common.Terminals.STRING");
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
