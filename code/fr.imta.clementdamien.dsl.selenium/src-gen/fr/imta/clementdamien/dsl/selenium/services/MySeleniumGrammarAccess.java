/*
 * generated by Xtext 2.12.0
 */
package fr.imta.clementdamien.dsl.selenium.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MySeleniumGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.imta.clementdamien.dsl.selenium.MySelenium.Program");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStatementsParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFunctionsParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Program:
		//	Statements | Functions;
		@Override public ParserRule getRule() { return rule; }
		
		//Statements | Functions
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Statements
		public RuleCall getStatementsParserRuleCall_0() { return cStatementsParserRuleCall_0; }
		
		//Functions
		public RuleCall getFunctionsParserRuleCall_1() { return cFunctionsParserRuleCall_1; }
	}
	public class FunctionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.imta.clementdamien.dsl.selenium.MySelenium.Functions");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFunctionsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFunctionsFunctionParserRuleCall_0_0 = (RuleCall)cFunctionsAssignment_0.eContents().get(0);
		private final Assignment cMainFunctionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMainFunctionMainFunctionParserRuleCall_1_0 = (RuleCall)cMainFunctionAssignment_1.eContents().get(0);
		
		//Functions:
		//	functions+=Function+ mainFunction=MainFunction;
		@Override public ParserRule getRule() { return rule; }
		
		//functions+=Function+ mainFunction=MainFunction
		public Group getGroup() { return cGroup; }
		
		//functions+=Function+
		public Assignment getFunctionsAssignment_0() { return cFunctionsAssignment_0; }
		
		//Function
		public RuleCall getFunctionsFunctionParserRuleCall_0_0() { return cFunctionsFunctionParserRuleCall_0_0; }
		
		//mainFunction=MainFunction
		public Assignment getMainFunctionAssignment_1() { return cMainFunctionAssignment_1; }
		
		//MainFunction
		public RuleCall getMainFunctionMainFunctionParserRuleCall_1_0() { return cMainFunctionMainFunctionParserRuleCall_1_0; }
	}
	public class StatementsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.imta.clementdamien.dsl.selenium.MySelenium.Statements");
		private final Assignment cStatementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cStatementsStatementParserRuleCall_0 = (RuleCall)cStatementsAssignment.eContents().get(0);
		
		//Statements:
		//	statements+=Statement+;
		@Override public ParserRule getRule() { return rule; }
		
		//statements+=Statement+
		public Assignment getStatementsAssignment() { return cStatementsAssignment; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_0() { return cStatementsStatementParserRuleCall_0; }
	}
	public class MainFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.imta.clementdamien.dsl.selenium.MySelenium.MainFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDefKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cMainKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStatementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStatementsStatementsParserRuleCall_3_0 = (RuleCall)cStatementsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//MainFunction:
		//	'def' 'main' '{'
		//	statements=Statements
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'def' 'main' '{' statements=Statements '}'
		public Group getGroup() { return cGroup; }
		
		//'def'
		public Keyword getDefKeyword_0() { return cDefKeyword_0; }
		
		//'main'
		public Keyword getMainKeyword_1() { return cMainKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//statements=Statements
		public Assignment getStatementsAssignment_3() { return cStatementsAssignment_3; }
		
		//Statements
		public RuleCall getStatementsStatementsParserRuleCall_3_0() { return cStatementsStatementsParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.imta.clementdamien.dsl.selenium.MySelenium.Function");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDefKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameFunctionNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cParamsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParamsFunctionParametersParserRuleCall_2_0 = (RuleCall)cParamsAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cStatementsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStatementsStatementsParserRuleCall_4_0 = (RuleCall)cStatementsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Function:
		//	'def' name=FunctionName params=FunctionParameters? '{'
		//	statements=Statements
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'def' name=FunctionName params=FunctionParameters? '{' statements=Statements '}'
		public Group getGroup() { return cGroup; }
		
		//'def'
		public Keyword getDefKeyword_0() { return cDefKeyword_0; }
		
		//name=FunctionName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//FunctionName
		public RuleCall getNameFunctionNameParserRuleCall_1_0() { return cNameFunctionNameParserRuleCall_1_0; }
		
		//params=FunctionParameters?
		public Assignment getParamsAssignment_2() { return cParamsAssignment_2; }
		
		//FunctionParameters
		public RuleCall getParamsFunctionParametersParserRuleCall_2_0() { return cParamsFunctionParametersParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//statements=Statements
		public Assignment getStatementsAssignment_4() { return cStatementsAssignment_4; }
		
		//Statements
		public RuleCall getStatementsStatementsParserRuleCall_4_0() { return cStatementsStatementsParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class FunctionNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.imta.clementdamien.dsl.selenium.MySelenium.FunctionName");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//FunctionName:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class FunctionCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.imta.clementdamien.dsl.selenium.MySelenium.FunctionCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRefAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cRefFunctionNameCrossReference_0_0 = (CrossReference)cRefAssignment_0.eContents().get(0);
		private final RuleCall cRefFunctionNameIDTerminalRuleCall_0_0_1 = (RuleCall)cRefFunctionNameCrossReference_0_0.eContents().get(1);
		private final Assignment cParamsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cParamsFunctionCallParametersParserRuleCall_1_0 = (RuleCall)cParamsAssignment_1.eContents().get(0);
		
		//FunctionCall:
		//	ref=[FunctionName] params=FunctionCallParameters;
		@Override public ParserRule getRule() { return rule; }
		
		//ref=[FunctionName] params=FunctionCallParameters
		public Group getGroup() { return cGroup; }
		
		//ref=[FunctionName]
		public Assignment getRefAssignment_0() { return cRefAssignment_0; }
		
		//[FunctionName]
		public CrossReference getRefFunctionNameCrossReference_0_0() { return cRefFunctionNameCrossReference_0_0; }
		
		//ID
		public RuleCall getRefFunctionNameIDTerminalRuleCall_0_0_1() { return cRefFunctionNameIDTerminalRuleCall_0_0_1; }
		
		//params=FunctionCallParameters
		public Assignment getParamsAssignment_1() { return cParamsAssignment_1; }
		
		//FunctionCallParameters
		public RuleCall getParamsFunctionCallParametersParserRuleCall_1_0() { return cParamsFunctionCallParametersParserRuleCall_1_0; }
	}
	public class ProjectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.imta.clementdamien.dsl.selenium.MySelenium.Projection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSelectorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSelectorSelectorParserRuleCall_0_0 = (RuleCall)cSelectorAssignment_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cProjectionActionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cProjectionActionProjectionActionParserRuleCall_2_0 = (RuleCall)cProjectionActionAssignment_2.eContents().get(0);
		
		//Projection:
		//	selector=Selector '.' projectionAction=ProjectionAction;
		@Override public ParserRule getRule() { return rule; }
		
		//selector=Selector '.' projectionAction=ProjectionAction
		public Group getGroup() { return cGroup; }
		
		//selector=Selector
		public Assignment getSelectorAssignment_0() { return cSelectorAssignment_0; }
		
		//Selector
		public RuleCall getSelectorSelectorParserRuleCall_0_0() { return cSelectorSelectorParserRuleCall_0_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//projectionAction=ProjectionAction
		public Assignment getProjectionActionAssignment_2() { return cProjectionActionAssignment_2; }
		
		//ProjectionAction
		public RuleCall getProjectionActionProjectionActionParserRuleCall_2_0() { return cProjectionActionProjectionActionParserRuleCall_2_0; }
	}
	public class ProjectionActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.imta.clementdamien.dsl.selenium.MySelenium.ProjectionAction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cValueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cTextKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cHtmlKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//ProjectionAction:
		//	'value' | 'text' | 'html';
		@Override public ParserRule getRule() { return rule; }
		
		//'value' | 'text' | 'html'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'value'
		public Keyword getValueKeyword_0() { return cValueKeyword_0; }
		
		//'text'
		public Keyword getTextKeyword_1() { return cTextKeyword_1; }
		
		//'html'
		public Keyword getHtmlKeyword_2() { return cHtmlKeyword_2; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.imta.clementdamien.dsl.selenium.MySelenium.Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cActionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAssignActionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFunctionCallParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cAssertEqualsParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cAssertContainsParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cNavigationActionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//Statement:
		//	Action | AssignAction | FunctionCall | AssertEquals | AssertContains | NavigationAction;
		@Override public ParserRule getRule() { return rule; }
		
		//Action | AssignAction | FunctionCall | AssertEquals | AssertContains | NavigationAction
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Action
		public RuleCall getActionParserRuleCall_0() { return cActionParserRuleCall_0; }
		
		//AssignAction
		public RuleCall getAssignActionParserRuleCall_1() { return cAssignActionParserRuleCall_1; }
		
		//FunctionCall
		public RuleCall getFunctionCallParserRuleCall_2() { return cFunctionCallParserRuleCall_2; }
		
		//AssertEquals
		public RuleCall getAssertEqualsParserRuleCall_3() { return cAssertEqualsParserRuleCall_3; }
		
		//AssertContains
		public RuleCall getAssertContainsParserRuleCall_4() { return cAssertContainsParserRuleCall_4; }
		
		//NavigationAction
		public RuleCall getNavigationActionParserRuleCall_5() { return cNavigationActionParserRuleCall_5; }
	}
	public class AssertEqualsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.imta.clementdamien.dsl.selenium.MySelenium.AssertEquals");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAssertKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAssertableElementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAssertableElementAssertableElementParserRuleCall_1_0 = (RuleCall)cAssertableElementAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAssertableElementAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAssertableElementAssertableElementParserRuleCall_3_0 = (RuleCall)cAssertableElementAssignment_3.eContents().get(0);
		
		//AssertEquals:
		//	'assert' assertableElement+=AssertableElement '=' assertableElement+=AssertableElement;
		@Override public ParserRule getRule() { return rule; }
		
		//'assert' assertableElement+=AssertableElement '=' assertableElement+=AssertableElement
		public Group getGroup() { return cGroup; }
		
		//'assert'
		public Keyword getAssertKeyword_0() { return cAssertKeyword_0; }
		
		//assertableElement+=AssertableElement
		public Assignment getAssertableElementAssignment_1() { return cAssertableElementAssignment_1; }
		
		//AssertableElement
		public RuleCall getAssertableElementAssertableElementParserRuleCall_1_0() { return cAssertableElementAssertableElementParserRuleCall_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//assertableElement+=AssertableElement
		public Assignment getAssertableElementAssignment_3() { return cAssertableElementAssignment_3; }
		
		//AssertableElement
		public RuleCall getAssertableElementAssertableElementParserRuleCall_3_0() { return cAssertableElementAssertableElementParserRuleCall_3_0; }
	}
	public class AssertContainsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.imta.clementdamien.dsl.selenium.MySelenium.AssertContains");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAssertKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cContainerAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cContainerAssertableElementParserRuleCall_1_0 = (RuleCall)cContainerAssignment_1.eContents().get(0);
		private final Keyword cContainsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cElementAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cElementAssertableElementParserRuleCall_3_0 = (RuleCall)cElementAssignment_3.eContents().get(0);
		
		//AssertContains:
		//	'assert' container=AssertableElement 'contains' element=AssertableElement;
		@Override public ParserRule getRule() { return rule; }
		
		//'assert' container=AssertableElement 'contains' element=AssertableElement
		public Group getGroup() { return cGroup; }
		
		//'assert'
		public Keyword getAssertKeyword_0() { return cAssertKeyword_0; }
		
		//container=AssertableElement
		public Assignment getContainerAssignment_1() { return cContainerAssignment_1; }
		
		//AssertableElement
		public RuleCall getContainerAssertableElementParserRuleCall_1_0() { return cContainerAssertableElementParserRuleCall_1_0; }
		
		//'contains'
		public Keyword getContainsKeyword_2() { return cContainsKeyword_2; }
		
		//element=AssertableElement
		public Assignment getElementAssignment_3() { return cElementAssignment_3; }
		
		//AssertableElement
		public RuleCall getElementAssertableElementParserRuleCall_3_0() { return cElementAssertableElementParserRuleCall_3_0; }
	}
	public class AssertableElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.imta.clementdamien.dsl.selenium.MySelenium.AssertableElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVariableParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStringParameterParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cProjectionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cFunctionCallParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//AssertableElement:
		//	Variable | StringParameter | Projection | FunctionCall;
		@Override public ParserRule getRule() { return rule; }
		
		//Variable | StringParameter | Projection | FunctionCall
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Variable
		public RuleCall getVariableParserRuleCall_0() { return cVariableParserRuleCall_0; }
		
		//StringParameter
		public RuleCall getStringParameterParserRuleCall_1() { return cStringParameterParserRuleCall_1; }
		
		//Projection
		public RuleCall getProjectionParserRuleCall_2() { return cProjectionParserRuleCall_2; }
		
		//FunctionCall
		public RuleCall getFunctionCallParserRuleCall_3() { return cFunctionCallParserRuleCall_3; }
	}
	public class NavigationActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.imta.clementdamien.dsl.selenium.MySelenium.NavigationAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cActionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cActionNavigationActionTypeParserRuleCall_0_0 = (RuleCall)cActionAssignment_0.eContents().get(0);
		private final Assignment cParamAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cParamSTRINGTerminalRuleCall_1_0 = (RuleCall)cParamAssignment_1.eContents().get(0);
		
		//NavigationAction:
		//	action=NavigationActionType param=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//action=NavigationActionType param=STRING
		public Group getGroup() { return cGroup; }
		
		//action=NavigationActionType
		public Assignment getActionAssignment_0() { return cActionAssignment_0; }
		
		//NavigationActionType
		public RuleCall getActionNavigationActionTypeParserRuleCall_0_0() { return cActionNavigationActionTypeParserRuleCall_0_0; }
		
		//param=STRING
		public Assignment getParamAssignment_1() { return cParamAssignment_1; }
		
		//STRING
		public RuleCall getParamSTRINGTerminalRuleCall_1_0() { return cParamSTRINGTerminalRuleCall_1_0; }
	}
	public class NavigationActionTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.imta.clementdamien.dsl.selenium.MySelenium.NavigationActionType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cGoKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cOpenBrowserKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//NavigationActionType:
		//	"go" | "openBrowser";
		@Override public ParserRule getRule() { return rule; }
		
		//"go" | "openBrowser"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"go"
		public Keyword getGoKeyword_0() { return cGoKeyword_0; }
		
		//"openBrowser"
		public Keyword getOpenBrowserKeyword_1() { return cOpenBrowserKeyword_1; }
	}
	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.imta.clementdamien.dsl.selenium.MySelenium.Action");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cActionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cActionActionTypeParserRuleCall_0_0 = (RuleCall)cActionAssignment_0.eContents().get(0);
		private final Assignment cTargetAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTargetActionTargetParserRuleCall_1_0 = (RuleCall)cTargetAssignment_1.eContents().get(0);
		private final Assignment cParamAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParamActionParameterParserRuleCall_2_0 = (RuleCall)cParamAssignment_2.eContents().get(0);
		
		//Action:
		//	action=ActionType target=ActionTarget param=ActionParameter?;
		@Override public ParserRule getRule() { return rule; }
		
		//action=ActionType target=ActionTarget param=ActionParameter?
		public Group getGroup() { return cGroup; }
		
		//action=ActionType
		public Assignment getActionAssignment_0() { return cActionAssignment_0; }
		
		//ActionType
		public RuleCall getActionActionTypeParserRuleCall_0_0() { return cActionActionTypeParserRuleCall_0_0; }
		
		//target=ActionTarget
		public Assignment getTargetAssignment_1() { return cTargetAssignment_1; }
		
		//ActionTarget
		public RuleCall getTargetActionTargetParserRuleCall_1_0() { return cTargetActionTargetParserRuleCall_1_0; }
		
		//param=ActionParameter?
		public Assignment getParamAssignment_2() { return cParamAssignment_2; }
		
		//ActionParameter
		public RuleCall getParamActionParameterParserRuleCall_2_0() { return cParamActionParameterParserRuleCall_2_0; }
	}
	public class AssignActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.imta.clementdamien.dsl.selenium.MySelenium.AssignAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAssignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTargetAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTargetActionTargetParserRuleCall_1_0 = (RuleCall)cTargetAssignment_1.eContents().get(0);
		private final Assignment cVariableAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVariableVariableParserRuleCall_2_0 = (RuleCall)cVariableAssignment_2.eContents().get(0);
		
		//// assign action is specific action 
		//AssignAction:
		//	'assign' target=ActionTarget variable=Variable;
		@Override public ParserRule getRule() { return rule; }
		
		//'assign' target=ActionTarget variable=Variable
		public Group getGroup() { return cGroup; }
		
		//'assign'
		public Keyword getAssignKeyword_0() { return cAssignKeyword_0; }
		
		//target=ActionTarget
		public Assignment getTargetAssignment_1() { return cTargetAssignment_1; }
		
		//ActionTarget
		public RuleCall getTargetActionTargetParserRuleCall_1_0() { return cTargetActionTargetParserRuleCall_1_0; }
		
		//variable=Variable
		public Assignment getVariableAssignment_2() { return cVariableAssignment_2; }
		
		//Variable
		public RuleCall getVariableVariableParserRuleCall_2_0() { return cVariableVariableParserRuleCall_2_0; }
	}
	public class ActionTargetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.imta.clementdamien.dsl.selenium.MySelenium.ActionTarget");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSelectorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVariableRefParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFunctionCallParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ActionTarget:
		//	Selector | VariableRef | FunctionCall;
		@Override public ParserRule getRule() { return rule; }
		
		//Selector | VariableRef | FunctionCall
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Selector
		public RuleCall getSelectorParserRuleCall_0() { return cSelectorParserRuleCall_0; }
		
		//VariableRef
		public RuleCall getVariableRefParserRuleCall_1() { return cVariableRefParserRuleCall_1; }
		
		//FunctionCall
		public RuleCall getFunctionCallParserRuleCall_2() { return cFunctionCallParserRuleCall_2; }
	}
	public class ActionParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.imta.clementdamien.dsl.selenium.MySelenium.ActionParameter");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSelectorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cActionParameterStringParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cVariableRefParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ActionParameter:
		//	Selector | ActionParameterString | VariableRef;
		@Override public ParserRule getRule() { return rule; }
		
		//Selector | ActionParameterString | VariableRef
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Selector
		public RuleCall getSelectorParserRuleCall_0() { return cSelectorParserRuleCall_0; }
		
		//ActionParameterString
		public RuleCall getActionParameterStringParserRuleCall_1() { return cActionParameterStringParserRuleCall_1; }
		
		//VariableRef
		public RuleCall getVariableRefParserRuleCall_2() { return cVariableRefParserRuleCall_2; }
	}
	public class ActionParameterStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.imta.clementdamien.dsl.selenium.MySelenium.ActionParameterString");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//ActionParameterString:
		//	value=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//value=STRING
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0() { return cValueSTRINGTerminalRuleCall_0; }
	}
	public class SelectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.imta.clementdamien.dsl.selenium.MySelenium.Selector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cElementAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cElementDOMElementParserRuleCall_0_0 = (RuleCall)cElementAssignment_0.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAttrsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAttrsAttributesParserRuleCall_2_0 = (RuleCall)cAttrsAssignment_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cParentKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cParentAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cParentParentParserRuleCall_4_2_0 = (RuleCall)cParentAssignment_4_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		private final Assignment cAllAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final Keyword cAllAllKeyword_5_0 = (Keyword)cAllAssignment_5.eContents().get(0);
		
		//Selector:
		//	element=DOMElement '[' attrs=Attributes? ']' ('.parent' '(' parent=Parent ')')? all?='.all'?;
		@Override public ParserRule getRule() { return rule; }
		
		//element=DOMElement '[' attrs=Attributes? ']' ('.parent' '(' parent=Parent ')')? all?='.all'?
		public Group getGroup() { return cGroup; }
		
		//element=DOMElement
		public Assignment getElementAssignment_0() { return cElementAssignment_0; }
		
		//DOMElement
		public RuleCall getElementDOMElementParserRuleCall_0_0() { return cElementDOMElementParserRuleCall_0_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//attrs=Attributes?
		public Assignment getAttrsAssignment_2() { return cAttrsAssignment_2; }
		
		//Attributes
		public RuleCall getAttrsAttributesParserRuleCall_2_0() { return cAttrsAttributesParserRuleCall_2_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
		
		//('.parent' '(' parent=Parent ')')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'.parent'
		public Keyword getParentKeyword_4_0() { return cParentKeyword_4_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4_1() { return cLeftParenthesisKeyword_4_1; }
		
		//parent=Parent
		public Assignment getParentAssignment_4_2() { return cParentAssignment_4_2; }
		
		//Parent
		public RuleCall getParentParentParserRuleCall_4_2_0() { return cParentParentParserRuleCall_4_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4_3() { return cRightParenthesisKeyword_4_3; }
		
		//all?='.all'?
		public Assignment getAllAssignment_5() { return cAllAssignment_5; }
		
		//'.all'
		public Keyword getAllAllKeyword_5_0() { return cAllAllKeyword_5_0; }
	}
	public class ParentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.imta.clementdamien.dsl.selenium.MySelenium.Parent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cElementAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cElementDOMElementParserRuleCall_0_0 = (RuleCall)cElementAssignment_0.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAttrsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAttrsAttributesParserRuleCall_2_0 = (RuleCall)cAttrsAssignment_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Parent:
		//	element=DOMElement '[' attrs=Attributes? ']';
		@Override public ParserRule getRule() { return rule; }
		
		//element=DOMElement '[' attrs=Attributes? ']'
		public Group getGroup() { return cGroup; }
		
		//element=DOMElement
		public Assignment getElementAssignment_0() { return cElementAssignment_0; }
		
		//DOMElement
		public RuleCall getElementDOMElementParserRuleCall_0_0() { return cElementDOMElementParserRuleCall_0_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//attrs=Attributes?
		public Assignment getAttrsAssignment_2() { return cAttrsAssignment_2; }
		
		//Attributes
		public RuleCall getAttrsAttributesParserRuleCall_2_0() { return cAttrsAttributesParserRuleCall_2_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}
	public class AttributesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.imta.clementdamien.dsl.selenium.MySelenium.Attributes");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAttrsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAttrsAttributeParserRuleCall_0_0 = (RuleCall)cAttrsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cAttrsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAttrsAttributeParserRuleCall_1_1_0 = (RuleCall)cAttrsAssignment_1_1.eContents().get(0);
		
		//Attributes:
		//	attrs+=Attribute (',' attrs+=Attribute)*;
		@Override public ParserRule getRule() { return rule; }
		
		//attrs+=Attribute (',' attrs+=Attribute)*
		public Group getGroup() { return cGroup; }
		
		//attrs+=Attribute
		public Assignment getAttrsAssignment_0() { return cAttrsAssignment_0; }
		
		//Attribute
		public RuleCall getAttrsAttributeParserRuleCall_0_0() { return cAttrsAttributeParserRuleCall_0_0; }
		
		//(',' attrs+=Attribute)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//attrs+=Attribute
		public Assignment getAttrsAssignment_1_1() { return cAttrsAssignment_1_1; }
		
		//Attribute
		public RuleCall getAttrsAttributeParserRuleCall_1_1_0() { return cAttrsAttributeParserRuleCall_1_1_0; }
	}
	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.imta.clementdamien.dsl.selenium.MySelenium.Attribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameDOMAttributeParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_0_0 = (RuleCall)cValueAssignment_2_0.eContents().get(0);
		private final Assignment cVariableAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cVariableVariableRefParserRuleCall_2_1_0 = (RuleCall)cVariableAssignment_2_1.eContents().get(0);
		
		//Attribute:
		//	name=DOMAttribute '=' (value=STRING | variable=VariableRef);
		@Override public ParserRule getRule() { return rule; }
		
		//name=DOMAttribute '=' (value=STRING | variable=VariableRef)
		public Group getGroup() { return cGroup; }
		
		//name=DOMAttribute
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//DOMAttribute
		public RuleCall getNameDOMAttributeParserRuleCall_0_0() { return cNameDOMAttributeParserRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//value=STRING | variable=VariableRef
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//value=STRING
		public Assignment getValueAssignment_2_0() { return cValueAssignment_2_0; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_0_0() { return cValueSTRINGTerminalRuleCall_2_0_0; }
		
		//variable=VariableRef
		public Assignment getVariableAssignment_2_1() { return cVariableAssignment_2_1; }
		
		//VariableRef
		public RuleCall getVariableVariableRefParserRuleCall_2_1_0() { return cVariableVariableRefParserRuleCall_2_1_0; }
	}
	public class DOMAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.imta.clementdamien.dsl.selenium.MySelenium.DOMAttribute");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cNameKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cTextKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cAltKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cCheckedKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cClassKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cIdKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cTypeKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cValueKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		
		//DOMAttribute:
		//	'name' | 'text' | 'alt' | 'checked' | 'class' | 'id' | 'type' | 'value';
		@Override public ParserRule getRule() { return rule; }
		
		//'name' | 'text' | 'alt' | 'checked' | 'class' | 'id' | 'type' | 'value'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'name'
		public Keyword getNameKeyword_0() { return cNameKeyword_0; }
		
		//'text'
		public Keyword getTextKeyword_1() { return cTextKeyword_1; }
		
		//'alt'
		public Keyword getAltKeyword_2() { return cAltKeyword_2; }
		
		//'checked'
		public Keyword getCheckedKeyword_3() { return cCheckedKeyword_3; }
		
		//'class'
		public Keyword getClassKeyword_4() { return cClassKeyword_4; }
		
		//'id'
		public Keyword getIdKeyword_5() { return cIdKeyword_5; }
		
		//'type'
		public Keyword getTypeKeyword_6() { return cTypeKeyword_6; }
		
		//'value'
		public Keyword getValueKeyword_7() { return cValueKeyword_7; }
	}
	public class DOMElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.imta.clementdamien.dsl.selenium.MySelenium.DOMElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cLinkKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cButtonKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cCheckboxKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cInputKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cH1Keyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cBodyKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cSelectKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cAKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cImgKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cDivKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		
		//DOMElement:
		//	'link' | 'button' | 'checkbox' | 'input' | 'h1' | 'body' | 'select' | 'a' | 'img' | 'div';
		@Override public ParserRule getRule() { return rule; }
		
		//'link' | 'button' | 'checkbox' | 'input' | 'h1' | 'body' | 'select' | 'a' | 'img' | 'div'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'link'
		public Keyword getLinkKeyword_0() { return cLinkKeyword_0; }
		
		//'button'
		public Keyword getButtonKeyword_1() { return cButtonKeyword_1; }
		
		//'checkbox'
		public Keyword getCheckboxKeyword_2() { return cCheckboxKeyword_2; }
		
		//'input'
		public Keyword getInputKeyword_3() { return cInputKeyword_3; }
		
		//'h1'
		public Keyword getH1Keyword_4() { return cH1Keyword_4; }
		
		//'body'
		public Keyword getBodyKeyword_5() { return cBodyKeyword_5; }
		
		//'select'
		public Keyword getSelectKeyword_6() { return cSelectKeyword_6; }
		
		//'a'
		public Keyword getAKeyword_7() { return cAKeyword_7; }
		
		//'img'
		public Keyword getImgKeyword_8() { return cImgKeyword_8; }
		
		//'div'
		public Keyword getDivKeyword_9() { return cDivKeyword_9; }
	}
	public class ActionTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.imta.clementdamien.dsl.selenium.MySelenium.ActionType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cClickKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFillKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cChooseKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cCountKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//ActionType:
		//	'click' | 'fill' | 'choose' | 'count';
		@Override public ParserRule getRule() { return rule; }
		
		//'click' | 'fill' | 'choose' | 'count'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'click'
		public Keyword getClickKeyword_0() { return cClickKeyword_0; }
		
		//'fill'
		public Keyword getFillKeyword_1() { return cFillKeyword_1; }
		
		//'choose'
		public Keyword getChooseKeyword_2() { return cChooseKeyword_2; }
		
		//'count'
		public Keyword getCountKeyword_3() { return cCountKeyword_3; }
	}
	public class FunctionParametersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.imta.clementdamien.dsl.selenium.MySelenium.FunctionParameters");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVariablesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVariablesVariableParserRuleCall_1_0 = (RuleCall)cVariablesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cVariablesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cVariablesVariableParserRuleCall_2_1_0 = (RuleCall)cVariablesAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//FunctionParameters:
		//	'(' variables+=Variable (',' variables+=Variable)* ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' variables+=Variable (',' variables+=Variable)* ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//variables+=Variable
		public Assignment getVariablesAssignment_1() { return cVariablesAssignment_1; }
		
		//Variable
		public RuleCall getVariablesVariableParserRuleCall_1_0() { return cVariablesVariableParserRuleCall_1_0; }
		
		//(',' variables+=Variable)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//variables+=Variable
		public Assignment getVariablesAssignment_2_1() { return cVariablesAssignment_2_1; }
		
		//Variable
		public RuleCall getVariablesVariableParserRuleCall_2_1_0() { return cVariablesVariableParserRuleCall_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class FunctionCallParametersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.imta.clementdamien.dsl.selenium.MySelenium.FunctionCallParameters");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cVariablesAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cVariablesVariableCallParserRuleCall_1_0_0 = (RuleCall)cVariablesAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cVariablesAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cVariablesVariableCallParserRuleCall_1_1_1_0 = (RuleCall)cVariablesAssignment_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//FunctionCallParameters:
		//	'(' (variables+=VariableCall (',' variables+=VariableCall)*)? ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' (variables+=VariableCall (',' variables+=VariableCall)*)? ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//(variables+=VariableCall (',' variables+=VariableCall)*)?
		public Group getGroup_1() { return cGroup_1; }
		
		//variables+=VariableCall
		public Assignment getVariablesAssignment_1_0() { return cVariablesAssignment_1_0; }
		
		//VariableCall
		public RuleCall getVariablesVariableCallParserRuleCall_1_0_0() { return cVariablesVariableCallParserRuleCall_1_0_0; }
		
		//(',' variables+=VariableCall)*
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//','
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }
		
		//variables+=VariableCall
		public Assignment getVariablesAssignment_1_1_1() { return cVariablesAssignment_1_1_1; }
		
		//VariableCall
		public RuleCall getVariablesVariableCallParserRuleCall_1_1_1_0() { return cVariablesVariableCallParserRuleCall_1_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class VariableCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.imta.clementdamien.dsl.selenium.MySelenium.VariableCall");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVariableRefParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStringParameterParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//VariableCall:
		//	VariableRef | StringParameter;
		@Override public ParserRule getRule() { return rule; }
		
		//VariableRef | StringParameter
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//VariableRef
		public RuleCall getVariableRefParserRuleCall_0() { return cVariableRefParserRuleCall_0; }
		
		//StringParameter
		public RuleCall getStringParameterParserRuleCall_1() { return cStringParameterParserRuleCall_1; }
	}
	public class VariableRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.imta.clementdamien.dsl.selenium.MySelenium.VariableRef");
		private final Assignment cRefAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cRefVariableCrossReference_0 = (CrossReference)cRefAssignment.eContents().get(0);
		private final RuleCall cRefVariableIDTerminalRuleCall_0_1 = (RuleCall)cRefVariableCrossReference_0.eContents().get(1);
		
		//VariableRef:
		//	ref=[Variable];
		@Override public ParserRule getRule() { return rule; }
		
		//ref=[Variable]
		public Assignment getRefAssignment() { return cRefAssignment; }
		
		//[Variable]
		public CrossReference getRefVariableCrossReference_0() { return cRefVariableCrossReference_0; }
		
		//ID
		public RuleCall getRefVariableIDTerminalRuleCall_0_1() { return cRefVariableIDTerminalRuleCall_0_1; }
	}
	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.imta.clementdamien.dsl.selenium.MySelenium.Variable");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Variable:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class StringParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.imta.clementdamien.dsl.selenium.MySelenium.StringParameter");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		////terminal ID : '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
		////terminal VAR_ID : ('a'..'z'|'A'..'Z'|'_')+;
		//StringParameter:
		//	value=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//value=STRING
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0() { return cValueSTRINGTerminalRuleCall_0; }
	}
	
	
	private final ProgramElements pProgram;
	private final FunctionsElements pFunctions;
	private final StatementsElements pStatements;
	private final MainFunctionElements pMainFunction;
	private final FunctionElements pFunction;
	private final FunctionNameElements pFunctionName;
	private final FunctionCallElements pFunctionCall;
	private final ProjectionElements pProjection;
	private final ProjectionActionElements pProjectionAction;
	private final StatementElements pStatement;
	private final AssertEqualsElements pAssertEquals;
	private final AssertContainsElements pAssertContains;
	private final AssertableElementElements pAssertableElement;
	private final NavigationActionElements pNavigationAction;
	private final NavigationActionTypeElements pNavigationActionType;
	private final ActionElements pAction;
	private final AssignActionElements pAssignAction;
	private final ActionTargetElements pActionTarget;
	private final ActionParameterElements pActionParameter;
	private final ActionParameterStringElements pActionParameterString;
	private final SelectorElements pSelector;
	private final ParentElements pParent;
	private final AttributesElements pAttributes;
	private final AttributeElements pAttribute;
	private final DOMAttributeElements pDOMAttribute;
	private final DOMElementElements pDOMElement;
	private final ActionTypeElements pActionType;
	private final FunctionParametersElements pFunctionParameters;
	private final FunctionCallParametersElements pFunctionCallParameters;
	private final VariableCallElements pVariableCall;
	private final VariableRefElements pVariableRef;
	private final VariableElements pVariable;
	private final StringParameterElements pStringParameter;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MySeleniumGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pProgram = new ProgramElements();
		this.pFunctions = new FunctionsElements();
		this.pStatements = new StatementsElements();
		this.pMainFunction = new MainFunctionElements();
		this.pFunction = new FunctionElements();
		this.pFunctionName = new FunctionNameElements();
		this.pFunctionCall = new FunctionCallElements();
		this.pProjection = new ProjectionElements();
		this.pProjectionAction = new ProjectionActionElements();
		this.pStatement = new StatementElements();
		this.pAssertEquals = new AssertEqualsElements();
		this.pAssertContains = new AssertContainsElements();
		this.pAssertableElement = new AssertableElementElements();
		this.pNavigationAction = new NavigationActionElements();
		this.pNavigationActionType = new NavigationActionTypeElements();
		this.pAction = new ActionElements();
		this.pAssignAction = new AssignActionElements();
		this.pActionTarget = new ActionTargetElements();
		this.pActionParameter = new ActionParameterElements();
		this.pActionParameterString = new ActionParameterStringElements();
		this.pSelector = new SelectorElements();
		this.pParent = new ParentElements();
		this.pAttributes = new AttributesElements();
		this.pAttribute = new AttributeElements();
		this.pDOMAttribute = new DOMAttributeElements();
		this.pDOMElement = new DOMElementElements();
		this.pActionType = new ActionTypeElements();
		this.pFunctionParameters = new FunctionParametersElements();
		this.pFunctionCallParameters = new FunctionCallParametersElements();
		this.pVariableCall = new VariableCallElements();
		this.pVariableRef = new VariableRefElements();
		this.pVariable = new VariableElements();
		this.pStringParameter = new StringParameterElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("fr.imta.clementdamien.dsl.selenium.MySelenium".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Program:
	//	Statements | Functions;
	public ProgramElements getProgramAccess() {
		return pProgram;
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}
	
	//Functions:
	//	functions+=Function+ mainFunction=MainFunction;
	public FunctionsElements getFunctionsAccess() {
		return pFunctions;
	}
	
	public ParserRule getFunctionsRule() {
		return getFunctionsAccess().getRule();
	}
	
	//Statements:
	//	statements+=Statement+;
	public StatementsElements getStatementsAccess() {
		return pStatements;
	}
	
	public ParserRule getStatementsRule() {
		return getStatementsAccess().getRule();
	}
	
	//MainFunction:
	//	'def' 'main' '{'
	//	statements=Statements
	//	'}';
	public MainFunctionElements getMainFunctionAccess() {
		return pMainFunction;
	}
	
	public ParserRule getMainFunctionRule() {
		return getMainFunctionAccess().getRule();
	}
	
	//Function:
	//	'def' name=FunctionName params=FunctionParameters? '{'
	//	statements=Statements
	//	'}';
	public FunctionElements getFunctionAccess() {
		return pFunction;
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}
	
	//FunctionName:
	//	name=ID;
	public FunctionNameElements getFunctionNameAccess() {
		return pFunctionName;
	}
	
	public ParserRule getFunctionNameRule() {
		return getFunctionNameAccess().getRule();
	}
	
	//FunctionCall:
	//	ref=[FunctionName] params=FunctionCallParameters;
	public FunctionCallElements getFunctionCallAccess() {
		return pFunctionCall;
	}
	
	public ParserRule getFunctionCallRule() {
		return getFunctionCallAccess().getRule();
	}
	
	//Projection:
	//	selector=Selector '.' projectionAction=ProjectionAction;
	public ProjectionElements getProjectionAccess() {
		return pProjection;
	}
	
	public ParserRule getProjectionRule() {
		return getProjectionAccess().getRule();
	}
	
	//ProjectionAction:
	//	'value' | 'text' | 'html';
	public ProjectionActionElements getProjectionActionAccess() {
		return pProjectionAction;
	}
	
	public ParserRule getProjectionActionRule() {
		return getProjectionActionAccess().getRule();
	}
	
	//Statement:
	//	Action | AssignAction | FunctionCall | AssertEquals | AssertContains | NavigationAction;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//AssertEquals:
	//	'assert' assertableElement+=AssertableElement '=' assertableElement+=AssertableElement;
	public AssertEqualsElements getAssertEqualsAccess() {
		return pAssertEquals;
	}
	
	public ParserRule getAssertEqualsRule() {
		return getAssertEqualsAccess().getRule();
	}
	
	//AssertContains:
	//	'assert' container=AssertableElement 'contains' element=AssertableElement;
	public AssertContainsElements getAssertContainsAccess() {
		return pAssertContains;
	}
	
	public ParserRule getAssertContainsRule() {
		return getAssertContainsAccess().getRule();
	}
	
	//AssertableElement:
	//	Variable | StringParameter | Projection | FunctionCall;
	public AssertableElementElements getAssertableElementAccess() {
		return pAssertableElement;
	}
	
	public ParserRule getAssertableElementRule() {
		return getAssertableElementAccess().getRule();
	}
	
	//NavigationAction:
	//	action=NavigationActionType param=STRING;
	public NavigationActionElements getNavigationActionAccess() {
		return pNavigationAction;
	}
	
	public ParserRule getNavigationActionRule() {
		return getNavigationActionAccess().getRule();
	}
	
	//NavigationActionType:
	//	"go" | "openBrowser";
	public NavigationActionTypeElements getNavigationActionTypeAccess() {
		return pNavigationActionType;
	}
	
	public ParserRule getNavigationActionTypeRule() {
		return getNavigationActionTypeAccess().getRule();
	}
	
	//Action:
	//	action=ActionType target=ActionTarget param=ActionParameter?;
	public ActionElements getActionAccess() {
		return pAction;
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}
	
	//// assign action is specific action 
	//AssignAction:
	//	'assign' target=ActionTarget variable=Variable;
	public AssignActionElements getAssignActionAccess() {
		return pAssignAction;
	}
	
	public ParserRule getAssignActionRule() {
		return getAssignActionAccess().getRule();
	}
	
	//ActionTarget:
	//	Selector | VariableRef | FunctionCall;
	public ActionTargetElements getActionTargetAccess() {
		return pActionTarget;
	}
	
	public ParserRule getActionTargetRule() {
		return getActionTargetAccess().getRule();
	}
	
	//ActionParameter:
	//	Selector | ActionParameterString | VariableRef;
	public ActionParameterElements getActionParameterAccess() {
		return pActionParameter;
	}
	
	public ParserRule getActionParameterRule() {
		return getActionParameterAccess().getRule();
	}
	
	//ActionParameterString:
	//	value=STRING;
	public ActionParameterStringElements getActionParameterStringAccess() {
		return pActionParameterString;
	}
	
	public ParserRule getActionParameterStringRule() {
		return getActionParameterStringAccess().getRule();
	}
	
	//Selector:
	//	element=DOMElement '[' attrs=Attributes? ']' ('.parent' '(' parent=Parent ')')? all?='.all'?;
	public SelectorElements getSelectorAccess() {
		return pSelector;
	}
	
	public ParserRule getSelectorRule() {
		return getSelectorAccess().getRule();
	}
	
	//Parent:
	//	element=DOMElement '[' attrs=Attributes? ']';
	public ParentElements getParentAccess() {
		return pParent;
	}
	
	public ParserRule getParentRule() {
		return getParentAccess().getRule();
	}
	
	//Attributes:
	//	attrs+=Attribute (',' attrs+=Attribute)*;
	public AttributesElements getAttributesAccess() {
		return pAttributes;
	}
	
	public ParserRule getAttributesRule() {
		return getAttributesAccess().getRule();
	}
	
	//Attribute:
	//	name=DOMAttribute '=' (value=STRING | variable=VariableRef);
	public AttributeElements getAttributeAccess() {
		return pAttribute;
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}
	
	//DOMAttribute:
	//	'name' | 'text' | 'alt' | 'checked' | 'class' | 'id' | 'type' | 'value';
	public DOMAttributeElements getDOMAttributeAccess() {
		return pDOMAttribute;
	}
	
	public ParserRule getDOMAttributeRule() {
		return getDOMAttributeAccess().getRule();
	}
	
	//DOMElement:
	//	'link' | 'button' | 'checkbox' | 'input' | 'h1' | 'body' | 'select' | 'a' | 'img' | 'div';
	public DOMElementElements getDOMElementAccess() {
		return pDOMElement;
	}
	
	public ParserRule getDOMElementRule() {
		return getDOMElementAccess().getRule();
	}
	
	//ActionType:
	//	'click' | 'fill' | 'choose' | 'count';
	public ActionTypeElements getActionTypeAccess() {
		return pActionType;
	}
	
	public ParserRule getActionTypeRule() {
		return getActionTypeAccess().getRule();
	}
	
	//FunctionParameters:
	//	'(' variables+=Variable (',' variables+=Variable)* ')';
	public FunctionParametersElements getFunctionParametersAccess() {
		return pFunctionParameters;
	}
	
	public ParserRule getFunctionParametersRule() {
		return getFunctionParametersAccess().getRule();
	}
	
	//FunctionCallParameters:
	//	'(' (variables+=VariableCall (',' variables+=VariableCall)*)? ')';
	public FunctionCallParametersElements getFunctionCallParametersAccess() {
		return pFunctionCallParameters;
	}
	
	public ParserRule getFunctionCallParametersRule() {
		return getFunctionCallParametersAccess().getRule();
	}
	
	//VariableCall:
	//	VariableRef | StringParameter;
	public VariableCallElements getVariableCallAccess() {
		return pVariableCall;
	}
	
	public ParserRule getVariableCallRule() {
		return getVariableCallAccess().getRule();
	}
	
	//VariableRef:
	//	ref=[Variable];
	public VariableRefElements getVariableRefAccess() {
		return pVariableRef;
	}
	
	public ParserRule getVariableRefRule() {
		return getVariableRefAccess().getRule();
	}
	
	//Variable:
	//	name=ID;
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}
	
	////terminal ID : '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	////terminal VAR_ID : ('a'..'z'|'A'..'Z'|'_')+;
	//StringParameter:
	//	value=STRING;
	public StringParameterElements getStringParameterAccess() {
		return pStringParameter;
	}
	
	public ParserRule getStringParameterRule() {
		return getStringParameterAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
