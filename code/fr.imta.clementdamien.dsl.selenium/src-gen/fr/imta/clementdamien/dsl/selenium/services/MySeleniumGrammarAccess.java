/*
 * generated by Xtext 2.12.0
 */
package fr.imta.clementdamien.dsl.selenium.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MySeleniumGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.imta.clementdamien.dsl.selenium.MySelenium.Program");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cFunctionsAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cFunctionsFunctionsParserRuleCall_0_0 = (RuleCall)cFunctionsAssignment_0.eContents().get(0);
		private final Assignment cStatementsAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cStatementsStatementsParserRuleCall_1_0 = (RuleCall)cStatementsAssignment_1.eContents().get(0);
		
		//Program:
		//	functions=Functions | statements=Statements;
		@Override public ParserRule getRule() { return rule; }
		
		//functions=Functions | statements=Statements
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//functions=Functions
		public Assignment getFunctionsAssignment_0() { return cFunctionsAssignment_0; }
		
		//Functions
		public RuleCall getFunctionsFunctionsParserRuleCall_0_0() { return cFunctionsFunctionsParserRuleCall_0_0; }
		
		//statements=Statements
		public Assignment getStatementsAssignment_1() { return cStatementsAssignment_1; }
		
		//Statements
		public RuleCall getStatementsStatementsParserRuleCall_1_0() { return cStatementsStatementsParserRuleCall_1_0; }
	}
	public class FunctionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.imta.clementdamien.dsl.selenium.MySelenium.Functions");
		private final Assignment cFunctionsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cFunctionsFunctionParserRuleCall_0 = (RuleCall)cFunctionsAssignment.eContents().get(0);
		
		//Functions:
		//	functions+=Function+;
		@Override public ParserRule getRule() { return rule; }
		
		//functions+=Function+
		public Assignment getFunctionsAssignment() { return cFunctionsAssignment; }
		
		//Function
		public RuleCall getFunctionsFunctionParserRuleCall_0() { return cFunctionsFunctionParserRuleCall_0; }
	}
	public class StatementsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.imta.clementdamien.dsl.selenium.MySelenium.Statements");
		private final Assignment cStatementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cStatementsStatementParserRuleCall_0 = (RuleCall)cStatementsAssignment.eContents().get(0);
		
		//Statements:
		//	statements+=Statement+;
		@Override public ParserRule getRule() { return rule; }
		
		//statements+=Statement+
		public Assignment getStatementsAssignment() { return cStatementsAssignment; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_0() { return cStatementsStatementParserRuleCall_0; }
	}
	public class FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.imta.clementdamien.dsl.selenium.MySelenium.Function");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDefKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameFunctionNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cParamsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParamsFunctionParametersParserRuleCall_2_0 = (RuleCall)cParamsAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cStatementsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStatementsStatementParserRuleCall_4_0 = (RuleCall)cStatementsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Function:
		//	'def' name=FunctionName params=FunctionParameters* '{'
		//	statements+=Statement*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'def' name=FunctionName params=FunctionParameters* '{' statements+=Statement* '}'
		public Group getGroup() { return cGroup; }
		
		//'def'
		public Keyword getDefKeyword_0() { return cDefKeyword_0; }
		
		//name=FunctionName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//FunctionName
		public RuleCall getNameFunctionNameParserRuleCall_1_0() { return cNameFunctionNameParserRuleCall_1_0; }
		
		//params=FunctionParameters*
		public Assignment getParamsAssignment_2() { return cParamsAssignment_2; }
		
		//FunctionParameters
		public RuleCall getParamsFunctionParametersParserRuleCall_2_0() { return cParamsFunctionParametersParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//statements+=Statement*
		public Assignment getStatementsAssignment_4() { return cStatementsAssignment_4; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_4_0() { return cStatementsStatementParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class FunctionNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.imta.clementdamien.dsl.selenium.MySelenium.FunctionName");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//FunctionName:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class FunctionCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.imta.clementdamien.dsl.selenium.MySelenium.FunctionCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRefAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cRefFunctionNameCrossReference_0_0 = (CrossReference)cRefAssignment_0.eContents().get(0);
		private final RuleCall cRefFunctionNameIDTerminalRuleCall_0_0_1 = (RuleCall)cRefFunctionNameCrossReference_0_0.eContents().get(1);
		private final Assignment cParamsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cParamsFunctionCallParametersParserRuleCall_1_0 = (RuleCall)cParamsAssignment_1.eContents().get(0);
		
		//FunctionCall:
		//	ref=[FunctionName] params=FunctionCallParameters;
		@Override public ParserRule getRule() { return rule; }
		
		//ref=[FunctionName] params=FunctionCallParameters
		public Group getGroup() { return cGroup; }
		
		//ref=[FunctionName]
		public Assignment getRefAssignment_0() { return cRefAssignment_0; }
		
		//[FunctionName]
		public CrossReference getRefFunctionNameCrossReference_0_0() { return cRefFunctionNameCrossReference_0_0; }
		
		//ID
		public RuleCall getRefFunctionNameIDTerminalRuleCall_0_0_1() { return cRefFunctionNameIDTerminalRuleCall_0_0_1; }
		
		//params=FunctionCallParameters
		public Assignment getParamsAssignment_1() { return cParamsAssignment_1; }
		
		//FunctionCallParameters
		public RuleCall getParamsFunctionCallParametersParserRuleCall_1_0() { return cParamsFunctionCallParametersParserRuleCall_1_0; }
	}
	public class ProjectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.imta.clementdamien.dsl.selenium.MySelenium.Projection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSelectorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSelectorSelectorParserRuleCall_0_0 = (RuleCall)cSelectorAssignment_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cProjectionActionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cProjectionActionProjectionActionParserRuleCall_2_0 = (RuleCall)cProjectionActionAssignment_2.eContents().get(0);
		
		//Projection:
		//	selector=Selector '.' projectionAction=ProjectionAction;
		@Override public ParserRule getRule() { return rule; }
		
		//selector=Selector '.' projectionAction=ProjectionAction
		public Group getGroup() { return cGroup; }
		
		//selector=Selector
		public Assignment getSelectorAssignment_0() { return cSelectorAssignment_0; }
		
		//Selector
		public RuleCall getSelectorSelectorParserRuleCall_0_0() { return cSelectorSelectorParserRuleCall_0_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//projectionAction=ProjectionAction
		public Assignment getProjectionActionAssignment_2() { return cProjectionActionAssignment_2; }
		
		//ProjectionAction
		public RuleCall getProjectionActionProjectionActionParserRuleCall_2_0() { return cProjectionActionProjectionActionParserRuleCall_2_0; }
	}
	public class ProjectionActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.imta.clementdamien.dsl.selenium.MySelenium.ProjectionAction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cValueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cTextKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cHtmlKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//ProjectionAction:
		//	'value' | 'text' | 'html';
		@Override public ParserRule getRule() { return rule; }
		
		//'value' | 'text' | 'html'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'value'
		public Keyword getValueKeyword_0() { return cValueKeyword_0; }
		
		//'text'
		public Keyword getTextKeyword_1() { return cTextKeyword_1; }
		
		//'html'
		public Keyword getHtmlKeyword_2() { return cHtmlKeyword_2; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.imta.clementdamien.dsl.selenium.MySelenium.Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOneParameterActionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFunctionCallParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAssertEqualsParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cAssertContainsParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cNavigationActionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Statement:
		//	OneParameterAction | FunctionCall | AssertEquals | AssertContains | NavigationAction;
		@Override public ParserRule getRule() { return rule; }
		
		//OneParameterAction | FunctionCall | AssertEquals | AssertContains | NavigationAction
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//OneParameterAction
		public RuleCall getOneParameterActionParserRuleCall_0() { return cOneParameterActionParserRuleCall_0; }
		
		//FunctionCall
		public RuleCall getFunctionCallParserRuleCall_1() { return cFunctionCallParserRuleCall_1; }
		
		//AssertEquals
		public RuleCall getAssertEqualsParserRuleCall_2() { return cAssertEqualsParserRuleCall_2; }
		
		//AssertContains
		public RuleCall getAssertContainsParserRuleCall_3() { return cAssertContainsParserRuleCall_3; }
		
		//NavigationAction
		public RuleCall getNavigationActionParserRuleCall_4() { return cNavigationActionParserRuleCall_4; }
	}
	public class AssertEqualsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.imta.clementdamien.dsl.selenium.MySelenium.AssertEquals");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAssertKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAssertableElementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAssertableElementAssertableElementParserRuleCall_1_0 = (RuleCall)cAssertableElementAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAssertableElementAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAssertableElementAssertableElementParserRuleCall_3_0 = (RuleCall)cAssertableElementAssignment_3.eContents().get(0);
		
		//AssertEquals:
		//	'assert' assertableElement+=AssertableElement '=' assertableElement+=AssertableElement;
		@Override public ParserRule getRule() { return rule; }
		
		//'assert' assertableElement+=AssertableElement '=' assertableElement+=AssertableElement
		public Group getGroup() { return cGroup; }
		
		//'assert'
		public Keyword getAssertKeyword_0() { return cAssertKeyword_0; }
		
		//assertableElement+=AssertableElement
		public Assignment getAssertableElementAssignment_1() { return cAssertableElementAssignment_1; }
		
		//AssertableElement
		public RuleCall getAssertableElementAssertableElementParserRuleCall_1_0() { return cAssertableElementAssertableElementParserRuleCall_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//assertableElement+=AssertableElement
		public Assignment getAssertableElementAssignment_3() { return cAssertableElementAssignment_3; }
		
		//AssertableElement
		public RuleCall getAssertableElementAssertableElementParserRuleCall_3_0() { return cAssertableElementAssertableElementParserRuleCall_3_0; }
	}
	public class AssertContainsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.imta.clementdamien.dsl.selenium.MySelenium.AssertContains");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAssertKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cContainerAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cContainerAssertableElementParserRuleCall_1_0 = (RuleCall)cContainerAssignment_1.eContents().get(0);
		private final Keyword cContainsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cElementAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cElementAssertableElementParserRuleCall_3_0 = (RuleCall)cElementAssignment_3.eContents().get(0);
		
		//AssertContains:
		//	'assert' container=AssertableElement 'contains' element=AssertableElement;
		@Override public ParserRule getRule() { return rule; }
		
		//'assert' container=AssertableElement 'contains' element=AssertableElement
		public Group getGroup() { return cGroup; }
		
		//'assert'
		public Keyword getAssertKeyword_0() { return cAssertKeyword_0; }
		
		//container=AssertableElement
		public Assignment getContainerAssignment_1() { return cContainerAssignment_1; }
		
		//AssertableElement
		public RuleCall getContainerAssertableElementParserRuleCall_1_0() { return cContainerAssertableElementParserRuleCall_1_0; }
		
		//'contains'
		public Keyword getContainsKeyword_2() { return cContainsKeyword_2; }
		
		//element=AssertableElement
		public Assignment getElementAssignment_3() { return cElementAssignment_3; }
		
		//AssertableElement
		public RuleCall getElementAssertableElementParserRuleCall_3_0() { return cElementAssertableElementParserRuleCall_3_0; }
	}
	public class AssertableElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.imta.clementdamien.dsl.selenium.MySelenium.AssertableElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVariableParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cProjectionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cFunctionCallParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//AssertableElement:
		//	Variable | STRING | Projection | FunctionCall;
		@Override public ParserRule getRule() { return rule; }
		
		//Variable | STRING | Projection | FunctionCall
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Variable
		public RuleCall getVariableParserRuleCall_0() { return cVariableParserRuleCall_0; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1() { return cSTRINGTerminalRuleCall_1; }
		
		//Projection
		public RuleCall getProjectionParserRuleCall_2() { return cProjectionParserRuleCall_2; }
		
		//FunctionCall
		public RuleCall getFunctionCallParserRuleCall_3() { return cFunctionCallParserRuleCall_3; }
	}
	public class NavigationActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.imta.clementdamien.dsl.selenium.MySelenium.NavigationAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cActionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cActionNavigationActionTypeParserRuleCall_0_0 = (RuleCall)cActionAssignment_0.eContents().get(0);
		private final Assignment cParamAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cParamSTRINGTerminalRuleCall_1_0 = (RuleCall)cParamAssignment_1.eContents().get(0);
		
		//NavigationAction:
		//	action=NavigationActionType param=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//action=NavigationActionType param=STRING
		public Group getGroup() { return cGroup; }
		
		//action=NavigationActionType
		public Assignment getActionAssignment_0() { return cActionAssignment_0; }
		
		//NavigationActionType
		public RuleCall getActionNavigationActionTypeParserRuleCall_0_0() { return cActionNavigationActionTypeParserRuleCall_0_0; }
		
		//param=STRING
		public Assignment getParamAssignment_1() { return cParamAssignment_1; }
		
		//STRING
		public RuleCall getParamSTRINGTerminalRuleCall_1_0() { return cParamSTRINGTerminalRuleCall_1_0; }
	}
	public class NavigationActionTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.imta.clementdamien.dsl.selenium.MySelenium.NavigationActionType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cGoKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cOpenBrowserKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//NavigationActionType:
		//	"go" | "openBrowser";
		@Override public ParserRule getRule() { return rule; }
		
		//"go" | "openBrowser"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"go"
		public Keyword getGoKeyword_0() { return cGoKeyword_0; }
		
		//"openBrowser"
		public Keyword getOpenBrowserKeyword_1() { return cOpenBrowserKeyword_1; }
	}
	public class OneParameterActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.imta.clementdamien.dsl.selenium.MySelenium.OneParameterAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cActionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cActionOneParameterActionTypeParserRuleCall_0_0 = (RuleCall)cActionAssignment_0.eContents().get(0);
		private final Assignment cSelectorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSelectorSelectorParserRuleCall_1_0 = (RuleCall)cSelectorAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cSelectorParameterAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cSelectorParameterSelectorParserRuleCall_2_0_0 = (RuleCall)cSelectorParameterAssignment_2_0.eContents().get(0);
		private final Assignment cStringParameterAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cStringParameterSTRINGTerminalRuleCall_2_1_0 = (RuleCall)cStringParameterAssignment_2_1.eContents().get(0);
		
		//OneParameterAction:
		//	action=OneParameterActionType selector=Selector (selectorParameter=Selector | stringParameter=STRING)?;
		@Override public ParserRule getRule() { return rule; }
		
		//action=OneParameterActionType selector=Selector (selectorParameter=Selector | stringParameter=STRING)?
		public Group getGroup() { return cGroup; }
		
		//action=OneParameterActionType
		public Assignment getActionAssignment_0() { return cActionAssignment_0; }
		
		//OneParameterActionType
		public RuleCall getActionOneParameterActionTypeParserRuleCall_0_0() { return cActionOneParameterActionTypeParserRuleCall_0_0; }
		
		//selector=Selector
		public Assignment getSelectorAssignment_1() { return cSelectorAssignment_1; }
		
		//Selector
		public RuleCall getSelectorSelectorParserRuleCall_1_0() { return cSelectorSelectorParserRuleCall_1_0; }
		
		//(selectorParameter=Selector | stringParameter=STRING)?
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//selectorParameter=Selector
		public Assignment getSelectorParameterAssignment_2_0() { return cSelectorParameterAssignment_2_0; }
		
		//Selector
		public RuleCall getSelectorParameterSelectorParserRuleCall_2_0_0() { return cSelectorParameterSelectorParserRuleCall_2_0_0; }
		
		//stringParameter=STRING
		public Assignment getStringParameterAssignment_2_1() { return cStringParameterAssignment_2_1; }
		
		//STRING
		public RuleCall getStringParameterSTRINGTerminalRuleCall_2_1_0() { return cStringParameterSTRINGTerminalRuleCall_2_1_0; }
	}
	public class TwoParametersActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.imta.clementdamien.dsl.selenium.MySelenium.TwoParametersAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cActionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cActionTwoParametersActionTypeParserRuleCall_0_0 = (RuleCall)cActionAssignment_0.eContents().get(0);
		private final Assignment cSelectorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSelectorSelectorParserRuleCall_1_0 = (RuleCall)cSelectorAssignment_1.eContents().get(0);
		private final Assignment cParameterAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParameterSelectorParserRuleCall_2_0 = (RuleCall)cParameterAssignment_2.eContents().get(0);
		
		//TwoParametersAction:
		//	action=TwoParametersActionType selector=Selector parameter=Selector;
		@Override public ParserRule getRule() { return rule; }
		
		//action=TwoParametersActionType selector=Selector parameter=Selector
		public Group getGroup() { return cGroup; }
		
		//action=TwoParametersActionType
		public Assignment getActionAssignment_0() { return cActionAssignment_0; }
		
		//TwoParametersActionType
		public RuleCall getActionTwoParametersActionTypeParserRuleCall_0_0() { return cActionTwoParametersActionTypeParserRuleCall_0_0; }
		
		//selector=Selector
		public Assignment getSelectorAssignment_1() { return cSelectorAssignment_1; }
		
		//Selector
		public RuleCall getSelectorSelectorParserRuleCall_1_0() { return cSelectorSelectorParserRuleCall_1_0; }
		
		//parameter=Selector
		public Assignment getParameterAssignment_2() { return cParameterAssignment_2; }
		
		//Selector
		public RuleCall getParameterSelectorParserRuleCall_2_0() { return cParameterSelectorParserRuleCall_2_0; }
	}
	public class SelectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.imta.clementdamien.dsl.selenium.MySelenium.Selector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cElementAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cElementDOMElementParserRuleCall_0_0 = (RuleCall)cElementAssignment_0.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAttrsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAttrsAttributesParserRuleCall_2_0 = (RuleCall)cAttrsAssignment_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cAllAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Keyword cAllAllKeyword_4_0 = (Keyword)cAllAssignment_4.eContents().get(0);
		
		//Selector:
		//	element=DOMElement '[' attrs=Attributes? ']' all?='.all'?;
		@Override public ParserRule getRule() { return rule; }
		
		//element=DOMElement '[' attrs=Attributes? ']' all?='.all'?
		public Group getGroup() { return cGroup; }
		
		//element=DOMElement
		public Assignment getElementAssignment_0() { return cElementAssignment_0; }
		
		//DOMElement
		public RuleCall getElementDOMElementParserRuleCall_0_0() { return cElementDOMElementParserRuleCall_0_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//attrs=Attributes?
		public Assignment getAttrsAssignment_2() { return cAttrsAssignment_2; }
		
		//Attributes
		public RuleCall getAttrsAttributesParserRuleCall_2_0() { return cAttrsAttributesParserRuleCall_2_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
		
		//all?='.all'?
		public Assignment getAllAssignment_4() { return cAllAssignment_4; }
		
		//'.all'
		public Keyword getAllAllKeyword_4_0() { return cAllAllKeyword_4_0; }
	}
	public class AttributesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.imta.clementdamien.dsl.selenium.MySelenium.Attributes");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAttrsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAttrsAttributeParserRuleCall_0_0 = (RuleCall)cAttrsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cAttrsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAttrsAttributeParserRuleCall_1_1_0 = (RuleCall)cAttrsAssignment_1_1.eContents().get(0);
		
		//Attributes:
		//	attrs+=Attribute (',' attrs+=Attribute)*;
		@Override public ParserRule getRule() { return rule; }
		
		//attrs+=Attribute (',' attrs+=Attribute)*
		public Group getGroup() { return cGroup; }
		
		//attrs+=Attribute
		public Assignment getAttrsAssignment_0() { return cAttrsAssignment_0; }
		
		//Attribute
		public RuleCall getAttrsAttributeParserRuleCall_0_0() { return cAttrsAttributeParserRuleCall_0_0; }
		
		//(',' attrs+=Attribute)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//attrs+=Attribute
		public Assignment getAttrsAssignment_1_1() { return cAttrsAssignment_1_1; }
		
		//Attribute
		public RuleCall getAttrsAttributeParserRuleCall_1_1_0() { return cAttrsAttributeParserRuleCall_1_1_0; }
	}
	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.imta.clementdamien.dsl.selenium.MySelenium.Attribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameDOMAttributeParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_0_0 = (RuleCall)cValueAssignment_2_0.eContents().get(0);
		private final Assignment cValAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final CrossReference cValVariableCrossReference_2_1_0 = (CrossReference)cValAssignment_2_1.eContents().get(0);
		private final RuleCall cValVariableIDTerminalRuleCall_2_1_0_1 = (RuleCall)cValVariableCrossReference_2_1_0.eContents().get(1);
		
		//Attribute:
		//	name=DOMAttribute '=' (value=STRING | val=[Variable]);
		@Override public ParserRule getRule() { return rule; }
		
		//name=DOMAttribute '=' (value=STRING | val=[Variable])
		public Group getGroup() { return cGroup; }
		
		//name=DOMAttribute
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//DOMAttribute
		public RuleCall getNameDOMAttributeParserRuleCall_0_0() { return cNameDOMAttributeParserRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//value=STRING | val=[Variable]
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//value=STRING
		public Assignment getValueAssignment_2_0() { return cValueAssignment_2_0; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_0_0() { return cValueSTRINGTerminalRuleCall_2_0_0; }
		
		//val=[Variable]
		public Assignment getValAssignment_2_1() { return cValAssignment_2_1; }
		
		//[Variable]
		public CrossReference getValVariableCrossReference_2_1_0() { return cValVariableCrossReference_2_1_0; }
		
		//ID
		public RuleCall getValVariableIDTerminalRuleCall_2_1_0_1() { return cValVariableIDTerminalRuleCall_2_1_0_1; }
	}
	public class DOMAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.imta.clementdamien.dsl.selenium.MySelenium.DOMAttribute");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cNameKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cTextKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cAltKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cCheckedKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cClassKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cIdKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cTypeKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		
		//DOMAttribute:
		//	'name' | 'text' | 'alt' | 'checked' | 'class' | 'id' | 'type';
		@Override public ParserRule getRule() { return rule; }
		
		//'name' | 'text' | 'alt' | 'checked' | 'class' | 'id' | 'type'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'name'
		public Keyword getNameKeyword_0() { return cNameKeyword_0; }
		
		//'text'
		public Keyword getTextKeyword_1() { return cTextKeyword_1; }
		
		//'alt'
		public Keyword getAltKeyword_2() { return cAltKeyword_2; }
		
		//'checked'
		public Keyword getCheckedKeyword_3() { return cCheckedKeyword_3; }
		
		//'class'
		public Keyword getClassKeyword_4() { return cClassKeyword_4; }
		
		//'id'
		public Keyword getIdKeyword_5() { return cIdKeyword_5; }
		
		//'type'
		public Keyword getTypeKeyword_6() { return cTypeKeyword_6; }
	}
	public class DOMElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.imta.clementdamien.dsl.selenium.MySelenium.DOMElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cLinkKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cButtonKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cCheckboxKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cInputKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cH1Keyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cBodyKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cSelectKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cAKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cImgKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		
		//DOMElement:
		//	'link' | 'button' | 'checkbox' | 'input' | 'h1' | 'body' | 'select' | 'a' | 'img';
		@Override public ParserRule getRule() { return rule; }
		
		//'link' | 'button' | 'checkbox' | 'input' | 'h1' | 'body' | 'select' | 'a' | 'img'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'link'
		public Keyword getLinkKeyword_0() { return cLinkKeyword_0; }
		
		//'button'
		public Keyword getButtonKeyword_1() { return cButtonKeyword_1; }
		
		//'checkbox'
		public Keyword getCheckboxKeyword_2() { return cCheckboxKeyword_2; }
		
		//'input'
		public Keyword getInputKeyword_3() { return cInputKeyword_3; }
		
		//'h1'
		public Keyword getH1Keyword_4() { return cH1Keyword_4; }
		
		//'body'
		public Keyword getBodyKeyword_5() { return cBodyKeyword_5; }
		
		//'select'
		public Keyword getSelectKeyword_6() { return cSelectKeyword_6; }
		
		//'a'
		public Keyword getAKeyword_7() { return cAKeyword_7; }
		
		//'img'
		public Keyword getImgKeyword_8() { return cImgKeyword_8; }
	}
	public class OneParameterActionTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.imta.clementdamien.dsl.selenium.MySelenium.OneParameterActionType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cClickKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cAssignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cFillKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cChooseKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//OneParameterActionType:
		//	'click' | 'assign' | 'fill' | 'choose';
		@Override public ParserRule getRule() { return rule; }
		
		//'click' | 'assign' | 'fill' | 'choose'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'click'
		public Keyword getClickKeyword_0() { return cClickKeyword_0; }
		
		//'assign'
		public Keyword getAssignKeyword_1() { return cAssignKeyword_1; }
		
		//'fill'
		public Keyword getFillKeyword_2() { return cFillKeyword_2; }
		
		//'choose'
		public Keyword getChooseKeyword_3() { return cChooseKeyword_3; }
	}
	public class TwoParametersActionTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.imta.clementdamien.dsl.selenium.MySelenium.TwoParametersActionType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAssignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFillKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cChooseKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//TwoParametersActionType:
		//	'assign' | 'fill' | 'choose';
		@Override public ParserRule getRule() { return rule; }
		
		//'assign' | 'fill' | 'choose'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'assign'
		public Keyword getAssignKeyword_0() { return cAssignKeyword_0; }
		
		//'fill'
		public Keyword getFillKeyword_1() { return cFillKeyword_1; }
		
		//'choose'
		public Keyword getChooseKeyword_2() { return cChooseKeyword_2; }
	}
	public class FunctionParametersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.imta.clementdamien.dsl.selenium.MySelenium.FunctionParameters");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVariablesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVariablesVariableParserRuleCall_1_0 = (RuleCall)cVariablesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cVariablesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cVariablesVariableParserRuleCall_2_1_0 = (RuleCall)cVariablesAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//FunctionParameters:
		//	'(' variables+=Variable (',' variables+=Variable)* ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' variables+=Variable (',' variables+=Variable)* ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//variables+=Variable
		public Assignment getVariablesAssignment_1() { return cVariablesAssignment_1; }
		
		//Variable
		public RuleCall getVariablesVariableParserRuleCall_1_0() { return cVariablesVariableParserRuleCall_1_0; }
		
		//(',' variables+=Variable)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//variables+=Variable
		public Assignment getVariablesAssignment_2_1() { return cVariablesAssignment_2_1; }
		
		//Variable
		public RuleCall getVariablesVariableParserRuleCall_2_1_0() { return cVariablesVariableParserRuleCall_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class FunctionCallParametersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.imta.clementdamien.dsl.selenium.MySelenium.FunctionCallParameters");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVariablesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVariablesVariableCallParserRuleCall_1_0 = (RuleCall)cVariablesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cVariablesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cVariablesVariableCallParserRuleCall_2_1_0 = (RuleCall)cVariablesAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//FunctionCallParameters:
		//	'(' variables+=VariableCall (',' variables+=VariableCall)* ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' variables+=VariableCall (',' variables+=VariableCall)* ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//variables+=VariableCall
		public Assignment getVariablesAssignment_1() { return cVariablesAssignment_1; }
		
		//VariableCall
		public RuleCall getVariablesVariableCallParserRuleCall_1_0() { return cVariablesVariableCallParserRuleCall_1_0; }
		
		//(',' variables+=VariableCall)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//variables+=VariableCall
		public Assignment getVariablesAssignment_2_1() { return cVariablesAssignment_2_1; }
		
		//VariableCall
		public RuleCall getVariablesVariableCallParserRuleCall_2_1_0() { return cVariablesVariableCallParserRuleCall_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class VariableCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.imta.clementdamien.dsl.selenium.MySelenium.VariableCall");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final CrossReference cNameVariableCrossReference_0_0 = (CrossReference)cNameAssignment_0.eContents().get(0);
		private final RuleCall cNameVariableIDTerminalRuleCall_0_0_1 = (RuleCall)cNameVariableCrossReference_0_0.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//VariableCall:
		//	name=[Variable] | STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//name=[Variable] | STRING
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//name=[Variable]
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//[Variable]
		public CrossReference getNameVariableCrossReference_0_0() { return cNameVariableCrossReference_0_0; }
		
		//ID
		public RuleCall getNameVariableIDTerminalRuleCall_0_0_1() { return cNameVariableIDTerminalRuleCall_0_0_1; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1() { return cSTRINGTerminalRuleCall_1; }
	}
	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.imta.clementdamien.dsl.selenium.MySelenium.Variable");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Variable:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	
	
	private final ProgramElements pProgram;
	private final FunctionsElements pFunctions;
	private final StatementsElements pStatements;
	private final FunctionElements pFunction;
	private final FunctionNameElements pFunctionName;
	private final FunctionCallElements pFunctionCall;
	private final ProjectionElements pProjection;
	private final ProjectionActionElements pProjectionAction;
	private final StatementElements pStatement;
	private final AssertEqualsElements pAssertEquals;
	private final AssertContainsElements pAssertContains;
	private final AssertableElementElements pAssertableElement;
	private final NavigationActionElements pNavigationAction;
	private final NavigationActionTypeElements pNavigationActionType;
	private final OneParameterActionElements pOneParameterAction;
	private final TwoParametersActionElements pTwoParametersAction;
	private final SelectorElements pSelector;
	private final AttributesElements pAttributes;
	private final AttributeElements pAttribute;
	private final DOMAttributeElements pDOMAttribute;
	private final DOMElementElements pDOMElement;
	private final OneParameterActionTypeElements pOneParameterActionType;
	private final TwoParametersActionTypeElements pTwoParametersActionType;
	private final FunctionParametersElements pFunctionParameters;
	private final FunctionCallParametersElements pFunctionCallParameters;
	private final VariableCallElements pVariableCall;
	private final VariableElements pVariable;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MySeleniumGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pProgram = new ProgramElements();
		this.pFunctions = new FunctionsElements();
		this.pStatements = new StatementsElements();
		this.pFunction = new FunctionElements();
		this.pFunctionName = new FunctionNameElements();
		this.pFunctionCall = new FunctionCallElements();
		this.pProjection = new ProjectionElements();
		this.pProjectionAction = new ProjectionActionElements();
		this.pStatement = new StatementElements();
		this.pAssertEquals = new AssertEqualsElements();
		this.pAssertContains = new AssertContainsElements();
		this.pAssertableElement = new AssertableElementElements();
		this.pNavigationAction = new NavigationActionElements();
		this.pNavigationActionType = new NavigationActionTypeElements();
		this.pOneParameterAction = new OneParameterActionElements();
		this.pTwoParametersAction = new TwoParametersActionElements();
		this.pSelector = new SelectorElements();
		this.pAttributes = new AttributesElements();
		this.pAttribute = new AttributeElements();
		this.pDOMAttribute = new DOMAttributeElements();
		this.pDOMElement = new DOMElementElements();
		this.pOneParameterActionType = new OneParameterActionTypeElements();
		this.pTwoParametersActionType = new TwoParametersActionTypeElements();
		this.pFunctionParameters = new FunctionParametersElements();
		this.pFunctionCallParameters = new FunctionCallParametersElements();
		this.pVariableCall = new VariableCallElements();
		this.pVariable = new VariableElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("fr.imta.clementdamien.dsl.selenium.MySelenium".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Program:
	//	functions=Functions | statements=Statements;
	public ProgramElements getProgramAccess() {
		return pProgram;
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}
	
	//Functions:
	//	functions+=Function+;
	public FunctionsElements getFunctionsAccess() {
		return pFunctions;
	}
	
	public ParserRule getFunctionsRule() {
		return getFunctionsAccess().getRule();
	}
	
	//Statements:
	//	statements+=Statement+;
	public StatementsElements getStatementsAccess() {
		return pStatements;
	}
	
	public ParserRule getStatementsRule() {
		return getStatementsAccess().getRule();
	}
	
	//Function:
	//	'def' name=FunctionName params=FunctionParameters* '{'
	//	statements+=Statement*
	//	'}';
	public FunctionElements getFunctionAccess() {
		return pFunction;
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}
	
	//FunctionName:
	//	name=ID;
	public FunctionNameElements getFunctionNameAccess() {
		return pFunctionName;
	}
	
	public ParserRule getFunctionNameRule() {
		return getFunctionNameAccess().getRule();
	}
	
	//FunctionCall:
	//	ref=[FunctionName] params=FunctionCallParameters;
	public FunctionCallElements getFunctionCallAccess() {
		return pFunctionCall;
	}
	
	public ParserRule getFunctionCallRule() {
		return getFunctionCallAccess().getRule();
	}
	
	//Projection:
	//	selector=Selector '.' projectionAction=ProjectionAction;
	public ProjectionElements getProjectionAccess() {
		return pProjection;
	}
	
	public ParserRule getProjectionRule() {
		return getProjectionAccess().getRule();
	}
	
	//ProjectionAction:
	//	'value' | 'text' | 'html';
	public ProjectionActionElements getProjectionActionAccess() {
		return pProjectionAction;
	}
	
	public ParserRule getProjectionActionRule() {
		return getProjectionActionAccess().getRule();
	}
	
	//Statement:
	//	OneParameterAction | FunctionCall | AssertEquals | AssertContains | NavigationAction;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//AssertEquals:
	//	'assert' assertableElement+=AssertableElement '=' assertableElement+=AssertableElement;
	public AssertEqualsElements getAssertEqualsAccess() {
		return pAssertEquals;
	}
	
	public ParserRule getAssertEqualsRule() {
		return getAssertEqualsAccess().getRule();
	}
	
	//AssertContains:
	//	'assert' container=AssertableElement 'contains' element=AssertableElement;
	public AssertContainsElements getAssertContainsAccess() {
		return pAssertContains;
	}
	
	public ParserRule getAssertContainsRule() {
		return getAssertContainsAccess().getRule();
	}
	
	//AssertableElement:
	//	Variable | STRING | Projection | FunctionCall;
	public AssertableElementElements getAssertableElementAccess() {
		return pAssertableElement;
	}
	
	public ParserRule getAssertableElementRule() {
		return getAssertableElementAccess().getRule();
	}
	
	//NavigationAction:
	//	action=NavigationActionType param=STRING;
	public NavigationActionElements getNavigationActionAccess() {
		return pNavigationAction;
	}
	
	public ParserRule getNavigationActionRule() {
		return getNavigationActionAccess().getRule();
	}
	
	//NavigationActionType:
	//	"go" | "openBrowser";
	public NavigationActionTypeElements getNavigationActionTypeAccess() {
		return pNavigationActionType;
	}
	
	public ParserRule getNavigationActionTypeRule() {
		return getNavigationActionTypeAccess().getRule();
	}
	
	//OneParameterAction:
	//	action=OneParameterActionType selector=Selector (selectorParameter=Selector | stringParameter=STRING)?;
	public OneParameterActionElements getOneParameterActionAccess() {
		return pOneParameterAction;
	}
	
	public ParserRule getOneParameterActionRule() {
		return getOneParameterActionAccess().getRule();
	}
	
	//TwoParametersAction:
	//	action=TwoParametersActionType selector=Selector parameter=Selector;
	public TwoParametersActionElements getTwoParametersActionAccess() {
		return pTwoParametersAction;
	}
	
	public ParserRule getTwoParametersActionRule() {
		return getTwoParametersActionAccess().getRule();
	}
	
	//Selector:
	//	element=DOMElement '[' attrs=Attributes? ']' all?='.all'?;
	public SelectorElements getSelectorAccess() {
		return pSelector;
	}
	
	public ParserRule getSelectorRule() {
		return getSelectorAccess().getRule();
	}
	
	//Attributes:
	//	attrs+=Attribute (',' attrs+=Attribute)*;
	public AttributesElements getAttributesAccess() {
		return pAttributes;
	}
	
	public ParserRule getAttributesRule() {
		return getAttributesAccess().getRule();
	}
	
	//Attribute:
	//	name=DOMAttribute '=' (value=STRING | val=[Variable]);
	public AttributeElements getAttributeAccess() {
		return pAttribute;
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}
	
	//DOMAttribute:
	//	'name' | 'text' | 'alt' | 'checked' | 'class' | 'id' | 'type';
	public DOMAttributeElements getDOMAttributeAccess() {
		return pDOMAttribute;
	}
	
	public ParserRule getDOMAttributeRule() {
		return getDOMAttributeAccess().getRule();
	}
	
	//DOMElement:
	//	'link' | 'button' | 'checkbox' | 'input' | 'h1' | 'body' | 'select' | 'a' | 'img';
	public DOMElementElements getDOMElementAccess() {
		return pDOMElement;
	}
	
	public ParserRule getDOMElementRule() {
		return getDOMElementAccess().getRule();
	}
	
	//OneParameterActionType:
	//	'click' | 'assign' | 'fill' | 'choose';
	public OneParameterActionTypeElements getOneParameterActionTypeAccess() {
		return pOneParameterActionType;
	}
	
	public ParserRule getOneParameterActionTypeRule() {
		return getOneParameterActionTypeAccess().getRule();
	}
	
	//TwoParametersActionType:
	//	'assign' | 'fill' | 'choose';
	public TwoParametersActionTypeElements getTwoParametersActionTypeAccess() {
		return pTwoParametersActionType;
	}
	
	public ParserRule getTwoParametersActionTypeRule() {
		return getTwoParametersActionTypeAccess().getRule();
	}
	
	//FunctionParameters:
	//	'(' variables+=Variable (',' variables+=Variable)* ')';
	public FunctionParametersElements getFunctionParametersAccess() {
		return pFunctionParameters;
	}
	
	public ParserRule getFunctionParametersRule() {
		return getFunctionParametersAccess().getRule();
	}
	
	//FunctionCallParameters:
	//	'(' variables+=VariableCall (',' variables+=VariableCall)* ')';
	public FunctionCallParametersElements getFunctionCallParametersAccess() {
		return pFunctionCallParameters;
	}
	
	public ParserRule getFunctionCallParametersRule() {
		return getFunctionCallParametersAccess().getRule();
	}
	
	//VariableCall:
	//	name=[Variable] | STRING;
	public VariableCallElements getVariableCallAccess() {
		return pVariableCall;
	}
	
	public ParserRule getVariableCallRule() {
		return getVariableCallAccess().getRule();
	}
	
	//Variable:
	//	name=ID;
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
