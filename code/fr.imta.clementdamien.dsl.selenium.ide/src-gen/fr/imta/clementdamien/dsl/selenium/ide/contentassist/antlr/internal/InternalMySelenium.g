/*
 * generated by Xtext 2.12.0
 */
grammar InternalMySelenium;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package fr.imta.clementdamien.dsl.selenium.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package fr.imta.clementdamien.dsl.selenium.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import fr.imta.clementdamien.dsl.selenium.services.MySeleniumGrammarAccess;

}
@parser::members {
	private MySeleniumGrammarAccess grammarAccess;

	public void setGrammarAccess(MySeleniumGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleProgram
entryRuleProgram
:
{ before(grammarAccess.getProgramRule()); }
	 ruleProgram
{ after(grammarAccess.getProgramRule()); } 
	 EOF 
;

// Rule Program
ruleProgram 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getProgramAccess().getAlternatives()); }
		(rule__Program__Alternatives)
		{ after(grammarAccess.getProgramAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFunctions
entryRuleFunctions
:
{ before(grammarAccess.getFunctionsRule()); }
	 ruleFunctions
{ after(grammarAccess.getFunctionsRule()); } 
	 EOF 
;

// Rule Functions
ruleFunctions 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFunctionsAccess().getGroup()); }
		(rule__Functions__Group__0)
		{ after(grammarAccess.getFunctionsAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStatements
entryRuleStatements
:
{ before(grammarAccess.getStatementsRule()); }
	 ruleStatements
{ after(grammarAccess.getStatementsRule()); } 
	 EOF 
;

// Rule Statements
ruleStatements 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		(
			{ before(grammarAccess.getStatementsAccess().getStatementsAssignment()); }
			(rule__Statements__StatementsAssignment)
			{ after(grammarAccess.getStatementsAccess().getStatementsAssignment()); }
		)
		(
			{ before(grammarAccess.getStatementsAccess().getStatementsAssignment()); }
			(rule__Statements__StatementsAssignment)*
			{ after(grammarAccess.getStatementsAccess().getStatementsAssignment()); }
		)
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMainFunction
entryRuleMainFunction
:
{ before(grammarAccess.getMainFunctionRule()); }
	 ruleMainFunction
{ after(grammarAccess.getMainFunctionRule()); } 
	 EOF 
;

// Rule MainFunction
ruleMainFunction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMainFunctionAccess().getGroup()); }
		(rule__MainFunction__Group__0)
		{ after(grammarAccess.getMainFunctionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFunction
entryRuleFunction
:
{ before(grammarAccess.getFunctionRule()); }
	 ruleFunction
{ after(grammarAccess.getFunctionRule()); } 
	 EOF 
;

// Rule Function
ruleFunction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFunctionAccess().getGroup()); }
		(rule__Function__Group__0)
		{ after(grammarAccess.getFunctionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFunctionName
entryRuleFunctionName
:
{ before(grammarAccess.getFunctionNameRule()); }
	 ruleFunctionName
{ after(grammarAccess.getFunctionNameRule()); } 
	 EOF 
;

// Rule FunctionName
ruleFunctionName 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFunctionNameAccess().getNameAssignment()); }
		(rule__FunctionName__NameAssignment)
		{ after(grammarAccess.getFunctionNameAccess().getNameAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFunctionCall
entryRuleFunctionCall
:
{ before(grammarAccess.getFunctionCallRule()); }
	 ruleFunctionCall
{ after(grammarAccess.getFunctionCallRule()); } 
	 EOF 
;

// Rule FunctionCall
ruleFunctionCall 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFunctionCallAccess().getGroup()); }
		(rule__FunctionCall__Group__0)
		{ after(grammarAccess.getFunctionCallAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleProjection
entryRuleProjection
:
{ before(grammarAccess.getProjectionRule()); }
	 ruleProjection
{ after(grammarAccess.getProjectionRule()); } 
	 EOF 
;

// Rule Projection
ruleProjection 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getProjectionAccess().getGroup()); }
		(rule__Projection__Group__0)
		{ after(grammarAccess.getProjectionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleProjectionAction
entryRuleProjectionAction
:
{ before(grammarAccess.getProjectionActionRule()); }
	 ruleProjectionAction
{ after(grammarAccess.getProjectionActionRule()); } 
	 EOF 
;

// Rule ProjectionAction
ruleProjectionAction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getProjectionActionAccess().getAlternatives()); }
		(rule__ProjectionAction__Alternatives)
		{ after(grammarAccess.getProjectionActionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStatement
entryRuleStatement
:
{ before(grammarAccess.getStatementRule()); }
	 ruleStatement
{ after(grammarAccess.getStatementRule()); } 
	 EOF 
;

// Rule Statement
ruleStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStatementAccess().getAlternatives()); }
		(rule__Statement__Alternatives)
		{ after(grammarAccess.getStatementAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAssertEquals
entryRuleAssertEquals
:
{ before(grammarAccess.getAssertEqualsRule()); }
	 ruleAssertEquals
{ after(grammarAccess.getAssertEqualsRule()); } 
	 EOF 
;

// Rule AssertEquals
ruleAssertEquals 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAssertEqualsAccess().getGroup()); }
		(rule__AssertEquals__Group__0)
		{ after(grammarAccess.getAssertEqualsAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAssertContains
entryRuleAssertContains
:
{ before(grammarAccess.getAssertContainsRule()); }
	 ruleAssertContains
{ after(grammarAccess.getAssertContainsRule()); } 
	 EOF 
;

// Rule AssertContains
ruleAssertContains 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAssertContainsAccess().getGroup()); }
		(rule__AssertContains__Group__0)
		{ after(grammarAccess.getAssertContainsAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAssertableElement
entryRuleAssertableElement
:
{ before(grammarAccess.getAssertableElementRule()); }
	 ruleAssertableElement
{ after(grammarAccess.getAssertableElementRule()); } 
	 EOF 
;

// Rule AssertableElement
ruleAssertableElement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAssertableElementAccess().getAlternatives()); }
		(rule__AssertableElement__Alternatives)
		{ after(grammarAccess.getAssertableElementAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNavigationAction
entryRuleNavigationAction
:
{ before(grammarAccess.getNavigationActionRule()); }
	 ruleNavigationAction
{ after(grammarAccess.getNavigationActionRule()); } 
	 EOF 
;

// Rule NavigationAction
ruleNavigationAction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNavigationActionAccess().getGroup()); }
		(rule__NavigationAction__Group__0)
		{ after(grammarAccess.getNavigationActionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNavigationActionType
entryRuleNavigationActionType
:
{ before(grammarAccess.getNavigationActionTypeRule()); }
	 ruleNavigationActionType
{ after(grammarAccess.getNavigationActionTypeRule()); } 
	 EOF 
;

// Rule NavigationActionType
ruleNavigationActionType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNavigationActionTypeAccess().getAlternatives()); }
		(rule__NavigationActionType__Alternatives)
		{ after(grammarAccess.getNavigationActionTypeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAction
entryRuleAction
:
{ before(grammarAccess.getActionRule()); }
	 ruleAction
{ after(grammarAccess.getActionRule()); } 
	 EOF 
;

// Rule Action
ruleAction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getActionAccess().getGroup()); }
		(rule__Action__Group__0)
		{ after(grammarAccess.getActionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAssignAction
entryRuleAssignAction
:
{ before(grammarAccess.getAssignActionRule()); }
	 ruleAssignAction
{ after(grammarAccess.getAssignActionRule()); } 
	 EOF 
;

// Rule AssignAction
ruleAssignAction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAssignActionAccess().getGroup()); }
		(rule__AssignAction__Group__0)
		{ after(grammarAccess.getAssignActionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleActionTarget
entryRuleActionTarget
:
{ before(grammarAccess.getActionTargetRule()); }
	 ruleActionTarget
{ after(grammarAccess.getActionTargetRule()); } 
	 EOF 
;

// Rule ActionTarget
ruleActionTarget 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getActionTargetAccess().getAlternatives()); }
		(rule__ActionTarget__Alternatives)
		{ after(grammarAccess.getActionTargetAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleActionParameter
entryRuleActionParameter
:
{ before(grammarAccess.getActionParameterRule()); }
	 ruleActionParameter
{ after(grammarAccess.getActionParameterRule()); } 
	 EOF 
;

// Rule ActionParameter
ruleActionParameter 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getActionParameterAccess().getAlternatives()); }
		(rule__ActionParameter__Alternatives)
		{ after(grammarAccess.getActionParameterAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleActionParameterString
entryRuleActionParameterString
:
{ before(grammarAccess.getActionParameterStringRule()); }
	 ruleActionParameterString
{ after(grammarAccess.getActionParameterStringRule()); } 
	 EOF 
;

// Rule ActionParameterString
ruleActionParameterString 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getActionParameterStringAccess().getValueAssignment()); }
		(rule__ActionParameterString__ValueAssignment)
		{ after(grammarAccess.getActionParameterStringAccess().getValueAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSelector
entryRuleSelector
:
{ before(grammarAccess.getSelectorRule()); }
	 ruleSelector
{ after(grammarAccess.getSelectorRule()); } 
	 EOF 
;

// Rule Selector
ruleSelector 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSelectorAccess().getGroup()); }
		(rule__Selector__Group__0)
		{ after(grammarAccess.getSelectorAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleParent
entryRuleParent
:
{ before(grammarAccess.getParentRule()); }
	 ruleParent
{ after(grammarAccess.getParentRule()); } 
	 EOF 
;

// Rule Parent
ruleParent 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getParentAccess().getGroup()); }
		(rule__Parent__Group__0)
		{ after(grammarAccess.getParentAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAttributes
entryRuleAttributes
:
{ before(grammarAccess.getAttributesRule()); }
	 ruleAttributes
{ after(grammarAccess.getAttributesRule()); } 
	 EOF 
;

// Rule Attributes
ruleAttributes 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAttributesAccess().getGroup()); }
		(rule__Attributes__Group__0)
		{ after(grammarAccess.getAttributesAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAttribute
entryRuleAttribute
:
{ before(grammarAccess.getAttributeRule()); }
	 ruleAttribute
{ after(grammarAccess.getAttributeRule()); } 
	 EOF 
;

// Rule Attribute
ruleAttribute 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAttributeAccess().getGroup()); }
		(rule__Attribute__Group__0)
		{ after(grammarAccess.getAttributeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDOMAttribute
entryRuleDOMAttribute
:
{ before(grammarAccess.getDOMAttributeRule()); }
	 ruleDOMAttribute
{ after(grammarAccess.getDOMAttributeRule()); } 
	 EOF 
;

// Rule DOMAttribute
ruleDOMAttribute 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDOMAttributeAccess().getAlternatives()); }
		(rule__DOMAttribute__Alternatives)
		{ after(grammarAccess.getDOMAttributeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDOMElement
entryRuleDOMElement
:
{ before(grammarAccess.getDOMElementRule()); }
	 ruleDOMElement
{ after(grammarAccess.getDOMElementRule()); } 
	 EOF 
;

// Rule DOMElement
ruleDOMElement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDOMElementAccess().getAlternatives()); }
		(rule__DOMElement__Alternatives)
		{ after(grammarAccess.getDOMElementAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleActionType
entryRuleActionType
:
{ before(grammarAccess.getActionTypeRule()); }
	 ruleActionType
{ after(grammarAccess.getActionTypeRule()); } 
	 EOF 
;

// Rule ActionType
ruleActionType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getActionTypeAccess().getAlternatives()); }
		(rule__ActionType__Alternatives)
		{ after(grammarAccess.getActionTypeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFunctionParameters
entryRuleFunctionParameters
:
{ before(grammarAccess.getFunctionParametersRule()); }
	 ruleFunctionParameters
{ after(grammarAccess.getFunctionParametersRule()); } 
	 EOF 
;

// Rule FunctionParameters
ruleFunctionParameters 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFunctionParametersAccess().getGroup()); }
		(rule__FunctionParameters__Group__0)
		{ after(grammarAccess.getFunctionParametersAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFunctionCallParameters
entryRuleFunctionCallParameters
:
{ before(grammarAccess.getFunctionCallParametersRule()); }
	 ruleFunctionCallParameters
{ after(grammarAccess.getFunctionCallParametersRule()); } 
	 EOF 
;

// Rule FunctionCallParameters
ruleFunctionCallParameters 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFunctionCallParametersAccess().getGroup()); }
		(rule__FunctionCallParameters__Group__0)
		{ after(grammarAccess.getFunctionCallParametersAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVariableCall
entryRuleVariableCall
:
{ before(grammarAccess.getVariableCallRule()); }
	 ruleVariableCall
{ after(grammarAccess.getVariableCallRule()); } 
	 EOF 
;

// Rule VariableCall
ruleVariableCall 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVariableCallAccess().getAlternatives()); }
		(rule__VariableCall__Alternatives)
		{ after(grammarAccess.getVariableCallAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVariableRef
entryRuleVariableRef
:
{ before(grammarAccess.getVariableRefRule()); }
	 ruleVariableRef
{ after(grammarAccess.getVariableRefRule()); } 
	 EOF 
;

// Rule VariableRef
ruleVariableRef 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVariableRefAccess().getRefAssignment()); }
		(rule__VariableRef__RefAssignment)
		{ after(grammarAccess.getVariableRefAccess().getRefAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVariable
entryRuleVariable
:
{ before(grammarAccess.getVariableRule()); }
	 ruleVariable
{ after(grammarAccess.getVariableRule()); } 
	 EOF 
;

// Rule Variable
ruleVariable 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVariableAccess().getNameAssignment()); }
		(rule__Variable__NameAssignment)
		{ after(grammarAccess.getVariableAccess().getNameAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStringParameter
entryRuleStringParameter
:
{ before(grammarAccess.getStringParameterRule()); }
	 ruleStringParameter
{ after(grammarAccess.getStringParameterRule()); } 
	 EOF 
;

// Rule StringParameter
ruleStringParameter 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStringParameterAccess().getValueAssignment()); }
		(rule__StringParameter__ValueAssignment)
		{ after(grammarAccess.getStringParameterAccess().getValueAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProgramAccess().getStatementsParserRuleCall_0()); }
		ruleStatements
		{ after(grammarAccess.getProgramAccess().getStatementsParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getProgramAccess().getFunctionsParserRuleCall_1()); }
		ruleFunctions
		{ after(grammarAccess.getProgramAccess().getFunctionsParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProjectionAction__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProjectionActionAccess().getValueKeyword_0()); }
		'value'
		{ after(grammarAccess.getProjectionActionAccess().getValueKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getProjectionActionAccess().getTextKeyword_1()); }
		'text'
		{ after(grammarAccess.getProjectionActionAccess().getTextKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getProjectionActionAccess().getHtmlKeyword_2()); }
		'html'
		{ after(grammarAccess.getProjectionActionAccess().getHtmlKeyword_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStatementAccess().getActionParserRuleCall_0()); }
		ruleAction
		{ after(grammarAccess.getStatementAccess().getActionParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getAssignActionParserRuleCall_1()); }
		ruleAssignAction
		{ after(grammarAccess.getStatementAccess().getAssignActionParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getFunctionCallParserRuleCall_2()); }
		ruleFunctionCall
		{ after(grammarAccess.getStatementAccess().getFunctionCallParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getAssertEqualsParserRuleCall_3()); }
		ruleAssertEquals
		{ after(grammarAccess.getStatementAccess().getAssertEqualsParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getAssertContainsParserRuleCall_4()); }
		ruleAssertContains
		{ after(grammarAccess.getStatementAccess().getAssertContainsParserRuleCall_4()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getNavigationActionParserRuleCall_5()); }
		ruleNavigationAction
		{ after(grammarAccess.getStatementAccess().getNavigationActionParserRuleCall_5()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AssertableElement__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAssertableElementAccess().getVariableParserRuleCall_0()); }
		ruleVariable
		{ after(grammarAccess.getAssertableElementAccess().getVariableParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getAssertableElementAccess().getStringParameterParserRuleCall_1()); }
		ruleStringParameter
		{ after(grammarAccess.getAssertableElementAccess().getStringParameterParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getAssertableElementAccess().getProjectionParserRuleCall_2()); }
		ruleProjection
		{ after(grammarAccess.getAssertableElementAccess().getProjectionParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getAssertableElementAccess().getFunctionCallParserRuleCall_3()); }
		ruleFunctionCall
		{ after(grammarAccess.getAssertableElementAccess().getFunctionCallParserRuleCall_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NavigationActionType__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNavigationActionTypeAccess().getGoKeyword_0()); }
		'go'
		{ after(grammarAccess.getNavigationActionTypeAccess().getGoKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getNavigationActionTypeAccess().getOpenBrowserKeyword_1()); }
		'openBrowser'
		{ after(grammarAccess.getNavigationActionTypeAccess().getOpenBrowserKeyword_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionTarget__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActionTargetAccess().getSelectorParserRuleCall_0()); }
		ruleSelector
		{ after(grammarAccess.getActionTargetAccess().getSelectorParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getActionTargetAccess().getVariableRefParserRuleCall_1()); }
		ruleVariableRef
		{ after(grammarAccess.getActionTargetAccess().getVariableRefParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getActionTargetAccess().getFunctionCallParserRuleCall_2()); }
		ruleFunctionCall
		{ after(grammarAccess.getActionTargetAccess().getFunctionCallParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionParameter__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActionParameterAccess().getSelectorParserRuleCall_0()); }
		ruleSelector
		{ after(grammarAccess.getActionParameterAccess().getSelectorParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getActionParameterAccess().getActionParameterStringParserRuleCall_1()); }
		ruleActionParameterString
		{ after(grammarAccess.getActionParameterAccess().getActionParameterStringParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getActionParameterAccess().getVariableRefParserRuleCall_2()); }
		ruleVariableRef
		{ after(grammarAccess.getActionParameterAccess().getVariableRefParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Alternatives_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAttributeAccess().getValueAssignment_2_0()); }
		(rule__Attribute__ValueAssignment_2_0)
		{ after(grammarAccess.getAttributeAccess().getValueAssignment_2_0()); }
	)
	|
	(
		{ before(grammarAccess.getAttributeAccess().getVariableAssignment_2_1()); }
		(rule__Attribute__VariableAssignment_2_1)
		{ after(grammarAccess.getAttributeAccess().getVariableAssignment_2_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DOMAttribute__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDOMAttributeAccess().getNameKeyword_0()); }
		'name'
		{ after(grammarAccess.getDOMAttributeAccess().getNameKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getDOMAttributeAccess().getTextKeyword_1()); }
		'text'
		{ after(grammarAccess.getDOMAttributeAccess().getTextKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getDOMAttributeAccess().getAltKeyword_2()); }
		'alt'
		{ after(grammarAccess.getDOMAttributeAccess().getAltKeyword_2()); }
	)
	|
	(
		{ before(grammarAccess.getDOMAttributeAccess().getCheckedKeyword_3()); }
		'checked'
		{ after(grammarAccess.getDOMAttributeAccess().getCheckedKeyword_3()); }
	)
	|
	(
		{ before(grammarAccess.getDOMAttributeAccess().getClassKeyword_4()); }
		'class'
		{ after(grammarAccess.getDOMAttributeAccess().getClassKeyword_4()); }
	)
	|
	(
		{ before(grammarAccess.getDOMAttributeAccess().getIdKeyword_5()); }
		'id'
		{ after(grammarAccess.getDOMAttributeAccess().getIdKeyword_5()); }
	)
	|
	(
		{ before(grammarAccess.getDOMAttributeAccess().getTypeKeyword_6()); }
		'type'
		{ after(grammarAccess.getDOMAttributeAccess().getTypeKeyword_6()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DOMElement__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDOMElementAccess().getLinkKeyword_0()); }
		'link'
		{ after(grammarAccess.getDOMElementAccess().getLinkKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getDOMElementAccess().getButtonKeyword_1()); }
		'button'
		{ after(grammarAccess.getDOMElementAccess().getButtonKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getDOMElementAccess().getCheckboxKeyword_2()); }
		'checkbox'
		{ after(grammarAccess.getDOMElementAccess().getCheckboxKeyword_2()); }
	)
	|
	(
		{ before(grammarAccess.getDOMElementAccess().getInputKeyword_3()); }
		'input'
		{ after(grammarAccess.getDOMElementAccess().getInputKeyword_3()); }
	)
	|
	(
		{ before(grammarAccess.getDOMElementAccess().getH1Keyword_4()); }
		'h1'
		{ after(grammarAccess.getDOMElementAccess().getH1Keyword_4()); }
	)
	|
	(
		{ before(grammarAccess.getDOMElementAccess().getBodyKeyword_5()); }
		'body'
		{ after(grammarAccess.getDOMElementAccess().getBodyKeyword_5()); }
	)
	|
	(
		{ before(grammarAccess.getDOMElementAccess().getSelectKeyword_6()); }
		'select'
		{ after(grammarAccess.getDOMElementAccess().getSelectKeyword_6()); }
	)
	|
	(
		{ before(grammarAccess.getDOMElementAccess().getAKeyword_7()); }
		'a'
		{ after(grammarAccess.getDOMElementAccess().getAKeyword_7()); }
	)
	|
	(
		{ before(grammarAccess.getDOMElementAccess().getImgKeyword_8()); }
		'img'
		{ after(grammarAccess.getDOMElementAccess().getImgKeyword_8()); }
	)
	|
	(
		{ before(grammarAccess.getDOMElementAccess().getDivKeyword_9()); }
		'div'
		{ after(grammarAccess.getDOMElementAccess().getDivKeyword_9()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionType__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActionTypeAccess().getClickKeyword_0()); }
		'click'
		{ after(grammarAccess.getActionTypeAccess().getClickKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getActionTypeAccess().getFillKeyword_1()); }
		'fill'
		{ after(grammarAccess.getActionTypeAccess().getFillKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getActionTypeAccess().getChooseKeyword_2()); }
		'choose'
		{ after(grammarAccess.getActionTypeAccess().getChooseKeyword_2()); }
	)
	|
	(
		{ before(grammarAccess.getActionTypeAccess().getCountKeyword_3()); }
		'count'
		{ after(grammarAccess.getActionTypeAccess().getCountKeyword_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableCall__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableCallAccess().getVariableRefParserRuleCall_0()); }
		ruleVariableRef
		{ after(grammarAccess.getVariableCallAccess().getVariableRefParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getVariableCallAccess().getStringParameterParserRuleCall_1()); }
		ruleStringParameter
		{ after(grammarAccess.getVariableCallAccess().getStringParameterParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Functions__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Functions__Group__0__Impl
	rule__Functions__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Functions__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getFunctionsAccess().getFunctionsAssignment_0()); }
		(rule__Functions__FunctionsAssignment_0)
		{ after(grammarAccess.getFunctionsAccess().getFunctionsAssignment_0()); }
	)
	(
		{ before(grammarAccess.getFunctionsAccess().getFunctionsAssignment_0()); }
		(rule__Functions__FunctionsAssignment_0)*
		{ after(grammarAccess.getFunctionsAccess().getFunctionsAssignment_0()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Functions__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Functions__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Functions__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionsAccess().getMainFunctionAssignment_1()); }
	(rule__Functions__MainFunctionAssignment_1)
	{ after(grammarAccess.getFunctionsAccess().getMainFunctionAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MainFunction__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MainFunction__Group__0__Impl
	rule__MainFunction__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MainFunction__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMainFunctionAccess().getDefKeyword_0()); }
	'def'
	{ after(grammarAccess.getMainFunctionAccess().getDefKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MainFunction__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MainFunction__Group__1__Impl
	rule__MainFunction__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MainFunction__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMainFunctionAccess().getMainKeyword_1()); }
	'main'
	{ after(grammarAccess.getMainFunctionAccess().getMainKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MainFunction__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MainFunction__Group__2__Impl
	rule__MainFunction__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__MainFunction__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMainFunctionAccess().getLeftCurlyBracketKeyword_2()); }
	'{'
	{ after(grammarAccess.getMainFunctionAccess().getLeftCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MainFunction__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MainFunction__Group__3__Impl
	rule__MainFunction__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__MainFunction__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMainFunctionAccess().getStatementsAssignment_3()); }
	(rule__MainFunction__StatementsAssignment_3)
	{ after(grammarAccess.getMainFunctionAccess().getStatementsAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MainFunction__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MainFunction__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MainFunction__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMainFunctionAccess().getRightCurlyBracketKeyword_4()); }
	'}'
	{ after(grammarAccess.getMainFunctionAccess().getRightCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group__0__Impl
	rule__Function__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getDefKeyword_0()); }
	'def'
	{ after(grammarAccess.getFunctionAccess().getDefKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group__1__Impl
	rule__Function__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getNameAssignment_1()); }
	(rule__Function__NameAssignment_1)
	{ after(grammarAccess.getFunctionAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group__2__Impl
	rule__Function__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getParamsAssignment_2()); }
	(rule__Function__ParamsAssignment_2)?
	{ after(grammarAccess.getFunctionAccess().getParamsAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group__3__Impl
	rule__Function__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getLeftCurlyBracketKeyword_3()); }
	'{'
	{ after(grammarAccess.getFunctionAccess().getLeftCurlyBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group__4__Impl
	rule__Function__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getStatementsAssignment_4()); }
	(rule__Function__StatementsAssignment_4)
	{ after(grammarAccess.getFunctionAccess().getStatementsAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getRightCurlyBracketKeyword_5()); }
	'}'
	{ after(grammarAccess.getFunctionAccess().getRightCurlyBracketKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionCall__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionCall__Group__0__Impl
	rule__FunctionCall__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionCallAccess().getRefAssignment_0()); }
	(rule__FunctionCall__RefAssignment_0)
	{ after(grammarAccess.getFunctionCallAccess().getRefAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionCall__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionCallAccess().getParamsAssignment_1()); }
	(rule__FunctionCall__ParamsAssignment_1)
	{ after(grammarAccess.getFunctionCallAccess().getParamsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Projection__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Projection__Group__0__Impl
	rule__Projection__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Projection__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProjectionAccess().getSelectorAssignment_0()); }
	(rule__Projection__SelectorAssignment_0)
	{ after(grammarAccess.getProjectionAccess().getSelectorAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Projection__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Projection__Group__1__Impl
	rule__Projection__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Projection__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProjectionAccess().getFullStopKeyword_1()); }
	'.'
	{ after(grammarAccess.getProjectionAccess().getFullStopKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Projection__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Projection__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Projection__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProjectionAccess().getProjectionActionAssignment_2()); }
	(rule__Projection__ProjectionActionAssignment_2)
	{ after(grammarAccess.getProjectionAccess().getProjectionActionAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AssertEquals__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AssertEquals__Group__0__Impl
	rule__AssertEquals__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AssertEquals__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssertEqualsAccess().getAssertKeyword_0()); }
	'assert'
	{ after(grammarAccess.getAssertEqualsAccess().getAssertKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AssertEquals__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AssertEquals__Group__1__Impl
	rule__AssertEquals__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AssertEquals__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssertEqualsAccess().getAssertableElementAssignment_1()); }
	(rule__AssertEquals__AssertableElementAssignment_1)
	{ after(grammarAccess.getAssertEqualsAccess().getAssertableElementAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AssertEquals__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AssertEquals__Group__2__Impl
	rule__AssertEquals__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__AssertEquals__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssertEqualsAccess().getEqualsSignKeyword_2()); }
	'='
	{ after(grammarAccess.getAssertEqualsAccess().getEqualsSignKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AssertEquals__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AssertEquals__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AssertEquals__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssertEqualsAccess().getAssertableElementAssignment_3()); }
	(rule__AssertEquals__AssertableElementAssignment_3)
	{ after(grammarAccess.getAssertEqualsAccess().getAssertableElementAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AssertContains__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AssertContains__Group__0__Impl
	rule__AssertContains__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AssertContains__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssertContainsAccess().getAssertKeyword_0()); }
	'assert'
	{ after(grammarAccess.getAssertContainsAccess().getAssertKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AssertContains__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AssertContains__Group__1__Impl
	rule__AssertContains__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AssertContains__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssertContainsAccess().getContainerAssignment_1()); }
	(rule__AssertContains__ContainerAssignment_1)
	{ after(grammarAccess.getAssertContainsAccess().getContainerAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AssertContains__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AssertContains__Group__2__Impl
	rule__AssertContains__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__AssertContains__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssertContainsAccess().getContainsKeyword_2()); }
	'contains'
	{ after(grammarAccess.getAssertContainsAccess().getContainsKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AssertContains__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AssertContains__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AssertContains__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssertContainsAccess().getElementAssignment_3()); }
	(rule__AssertContains__ElementAssignment_3)
	{ after(grammarAccess.getAssertContainsAccess().getElementAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__NavigationAction__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NavigationAction__Group__0__Impl
	rule__NavigationAction__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NavigationAction__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNavigationActionAccess().getActionAssignment_0()); }
	(rule__NavigationAction__ActionAssignment_0)
	{ after(grammarAccess.getNavigationActionAccess().getActionAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NavigationAction__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NavigationAction__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NavigationAction__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNavigationActionAccess().getParamAssignment_1()); }
	(rule__NavigationAction__ParamAssignment_1)
	{ after(grammarAccess.getNavigationActionAccess().getParamAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Action__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Action__Group__0__Impl
	rule__Action__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActionAccess().getActionAssignment_0()); }
	(rule__Action__ActionAssignment_0)
	{ after(grammarAccess.getActionAccess().getActionAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Action__Group__1__Impl
	rule__Action__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActionAccess().getTargetAssignment_1()); }
	(rule__Action__TargetAssignment_1)
	{ after(grammarAccess.getActionAccess().getTargetAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Action__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActionAccess().getParamAssignment_2()); }
	(rule__Action__ParamAssignment_2)?
	{ after(grammarAccess.getActionAccess().getParamAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AssignAction__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AssignAction__Group__0__Impl
	rule__AssignAction__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignAction__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignActionAccess().getAssignKeyword_0()); }
	'assign'
	{ after(grammarAccess.getAssignActionAccess().getAssignKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignAction__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AssignAction__Group__1__Impl
	rule__AssignAction__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignAction__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignActionAccess().getTargetAssignment_1()); }
	(rule__AssignAction__TargetAssignment_1)
	{ after(grammarAccess.getAssignActionAccess().getTargetAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignAction__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AssignAction__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignAction__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignActionAccess().getVariableAssignment_2()); }
	(rule__AssignAction__VariableAssignment_2)
	{ after(grammarAccess.getAssignActionAccess().getVariableAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Selector__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Selector__Group__0__Impl
	rule__Selector__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Selector__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectorAccess().getElementAssignment_0()); }
	(rule__Selector__ElementAssignment_0)
	{ after(grammarAccess.getSelectorAccess().getElementAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Selector__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Selector__Group__1__Impl
	rule__Selector__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Selector__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectorAccess().getLeftSquareBracketKeyword_1()); }
	'['
	{ after(grammarAccess.getSelectorAccess().getLeftSquareBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Selector__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Selector__Group__2__Impl
	rule__Selector__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Selector__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectorAccess().getAttrsAssignment_2()); }
	(rule__Selector__AttrsAssignment_2)?
	{ after(grammarAccess.getSelectorAccess().getAttrsAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Selector__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Selector__Group__3__Impl
	rule__Selector__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Selector__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectorAccess().getRightSquareBracketKeyword_3()); }
	']'
	{ after(grammarAccess.getSelectorAccess().getRightSquareBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Selector__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Selector__Group__4__Impl
	rule__Selector__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Selector__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectorAccess().getGroup_4()); }
	(rule__Selector__Group_4__0)?
	{ after(grammarAccess.getSelectorAccess().getGroup_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Selector__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Selector__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Selector__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectorAccess().getAllAssignment_5()); }
	(rule__Selector__AllAssignment_5)?
	{ after(grammarAccess.getSelectorAccess().getAllAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Selector__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Selector__Group_4__0__Impl
	rule__Selector__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Selector__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectorAccess().getParentKeyword_4_0()); }
	'.parent'
	{ after(grammarAccess.getSelectorAccess().getParentKeyword_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Selector__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Selector__Group_4__1__Impl
	rule__Selector__Group_4__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Selector__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectorAccess().getLeftParenthesisKeyword_4_1()); }
	'('
	{ after(grammarAccess.getSelectorAccess().getLeftParenthesisKeyword_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Selector__Group_4__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Selector__Group_4__2__Impl
	rule__Selector__Group_4__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Selector__Group_4__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectorAccess().getParentAssignment_4_2()); }
	(rule__Selector__ParentAssignment_4_2)
	{ after(grammarAccess.getSelectorAccess().getParentAssignment_4_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Selector__Group_4__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Selector__Group_4__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Selector__Group_4__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectorAccess().getRightParenthesisKeyword_4_3()); }
	')'
	{ after(grammarAccess.getSelectorAccess().getRightParenthesisKeyword_4_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Parent__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Parent__Group__0__Impl
	rule__Parent__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Parent__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParentAccess().getElementAssignment_0()); }
	(rule__Parent__ElementAssignment_0)
	{ after(grammarAccess.getParentAccess().getElementAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Parent__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Parent__Group__1__Impl
	rule__Parent__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Parent__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParentAccess().getLeftSquareBracketKeyword_1()); }
	'['
	{ after(grammarAccess.getParentAccess().getLeftSquareBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Parent__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Parent__Group__2__Impl
	rule__Parent__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Parent__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParentAccess().getAttrsAssignment_2()); }
	(rule__Parent__AttrsAssignment_2)?
	{ after(grammarAccess.getParentAccess().getAttrsAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Parent__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Parent__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Parent__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParentAccess().getRightSquareBracketKeyword_3()); }
	']'
	{ after(grammarAccess.getParentAccess().getRightSquareBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Attributes__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Attributes__Group__0__Impl
	rule__Attributes__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Attributes__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttributesAccess().getAttrsAssignment_0()); }
	(rule__Attributes__AttrsAssignment_0)
	{ after(grammarAccess.getAttributesAccess().getAttrsAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Attributes__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Attributes__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Attributes__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttributesAccess().getGroup_1()); }
	(rule__Attributes__Group_1__0)*
	{ after(grammarAccess.getAttributesAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Attributes__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Attributes__Group_1__0__Impl
	rule__Attributes__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Attributes__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttributesAccess().getCommaKeyword_1_0()); }
	','
	{ after(grammarAccess.getAttributesAccess().getCommaKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Attributes__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Attributes__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Attributes__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttributesAccess().getAttrsAssignment_1_1()); }
	(rule__Attributes__AttrsAssignment_1_1)
	{ after(grammarAccess.getAttributesAccess().getAttrsAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Attribute__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Attribute__Group__0__Impl
	rule__Attribute__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttributeAccess().getNameAssignment_0()); }
	(rule__Attribute__NameAssignment_0)
	{ after(grammarAccess.getAttributeAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Attribute__Group__1__Impl
	rule__Attribute__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttributeAccess().getEqualsSignKeyword_1()); }
	'='
	{ after(grammarAccess.getAttributeAccess().getEqualsSignKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Attribute__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttributeAccess().getAlternatives_2()); }
	(rule__Attribute__Alternatives_2)
	{ after(grammarAccess.getAttributeAccess().getAlternatives_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionParameters__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionParameters__Group__0__Impl
	rule__FunctionParameters__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionParameters__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionParametersAccess().getLeftParenthesisKeyword_0()); }
	'('
	{ after(grammarAccess.getFunctionParametersAccess().getLeftParenthesisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionParameters__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionParameters__Group__1__Impl
	rule__FunctionParameters__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionParameters__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionParametersAccess().getVariablesAssignment_1()); }
	(rule__FunctionParameters__VariablesAssignment_1)
	{ after(grammarAccess.getFunctionParametersAccess().getVariablesAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionParameters__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionParameters__Group__2__Impl
	rule__FunctionParameters__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionParameters__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionParametersAccess().getGroup_2()); }
	(rule__FunctionParameters__Group_2__0)*
	{ after(grammarAccess.getFunctionParametersAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionParameters__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionParameters__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionParameters__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionParametersAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getFunctionParametersAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionParameters__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionParameters__Group_2__0__Impl
	rule__FunctionParameters__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionParameters__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionParametersAccess().getCommaKeyword_2_0()); }
	','
	{ after(grammarAccess.getFunctionParametersAccess().getCommaKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionParameters__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionParameters__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionParameters__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionParametersAccess().getVariablesAssignment_2_1()); }
	(rule__FunctionParameters__VariablesAssignment_2_1)
	{ after(grammarAccess.getFunctionParametersAccess().getVariablesAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionCallParameters__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionCallParameters__Group__0__Impl
	rule__FunctionCallParameters__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCallParameters__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionCallParametersAccess().getLeftParenthesisKeyword_0()); }
	'('
	{ after(grammarAccess.getFunctionCallParametersAccess().getLeftParenthesisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCallParameters__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionCallParameters__Group__1__Impl
	rule__FunctionCallParameters__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCallParameters__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionCallParametersAccess().getGroup_1()); }
	(rule__FunctionCallParameters__Group_1__0)?
	{ after(grammarAccess.getFunctionCallParametersAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCallParameters__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionCallParameters__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCallParameters__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionCallParametersAccess().getRightParenthesisKeyword_2()); }
	')'
	{ after(grammarAccess.getFunctionCallParametersAccess().getRightParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionCallParameters__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionCallParameters__Group_1__0__Impl
	rule__FunctionCallParameters__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCallParameters__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionCallParametersAccess().getVariablesAssignment_1_0()); }
	(rule__FunctionCallParameters__VariablesAssignment_1_0)
	{ after(grammarAccess.getFunctionCallParametersAccess().getVariablesAssignment_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCallParameters__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionCallParameters__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCallParameters__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionCallParametersAccess().getGroup_1_1()); }
	(rule__FunctionCallParameters__Group_1_1__0)*
	{ after(grammarAccess.getFunctionCallParametersAccess().getGroup_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionCallParameters__Group_1_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionCallParameters__Group_1_1__0__Impl
	rule__FunctionCallParameters__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCallParameters__Group_1_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionCallParametersAccess().getCommaKeyword_1_1_0()); }
	','
	{ after(grammarAccess.getFunctionCallParametersAccess().getCommaKeyword_1_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCallParameters__Group_1_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionCallParameters__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCallParameters__Group_1_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionCallParametersAccess().getVariablesAssignment_1_1_1()); }
	(rule__FunctionCallParameters__VariablesAssignment_1_1_1)
	{ after(grammarAccess.getFunctionCallParametersAccess().getVariablesAssignment_1_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Functions__FunctionsAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionsAccess().getFunctionsFunctionParserRuleCall_0_0()); }
		ruleFunction
		{ after(grammarAccess.getFunctionsAccess().getFunctionsFunctionParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Functions__MainFunctionAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionsAccess().getMainFunctionMainFunctionParserRuleCall_1_0()); }
		ruleMainFunction
		{ after(grammarAccess.getFunctionsAccess().getMainFunctionMainFunctionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Statements__StatementsAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStatementsAccess().getStatementsStatementParserRuleCall_0()); }
		ruleStatement
		{ after(grammarAccess.getStatementsAccess().getStatementsStatementParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MainFunction__StatementsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMainFunctionAccess().getStatementsStatementsParserRuleCall_3_0()); }
		ruleStatements
		{ after(grammarAccess.getMainFunctionAccess().getStatementsStatementsParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionAccess().getNameFunctionNameParserRuleCall_1_0()); }
		ruleFunctionName
		{ after(grammarAccess.getFunctionAccess().getNameFunctionNameParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__ParamsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionAccess().getParamsFunctionParametersParserRuleCall_2_0()); }
		ruleFunctionParameters
		{ after(grammarAccess.getFunctionAccess().getParamsFunctionParametersParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__StatementsAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionAccess().getStatementsStatementsParserRuleCall_4_0()); }
		ruleStatements
		{ after(grammarAccess.getFunctionAccess().getStatementsStatementsParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionName__NameAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionNameAccess().getNameIDTerminalRuleCall_0()); }
		RULE_ID
		{ after(grammarAccess.getFunctionNameAccess().getNameIDTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__RefAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionCallAccess().getRefFunctionNameCrossReference_0_0()); }
		(
			{ before(grammarAccess.getFunctionCallAccess().getRefFunctionNameIDTerminalRuleCall_0_0_1()); }
			RULE_ID
			{ after(grammarAccess.getFunctionCallAccess().getRefFunctionNameIDTerminalRuleCall_0_0_1()); }
		)
		{ after(grammarAccess.getFunctionCallAccess().getRefFunctionNameCrossReference_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__ParamsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionCallAccess().getParamsFunctionCallParametersParserRuleCall_1_0()); }
		ruleFunctionCallParameters
		{ after(grammarAccess.getFunctionCallAccess().getParamsFunctionCallParametersParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Projection__SelectorAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProjectionAccess().getSelectorSelectorParserRuleCall_0_0()); }
		ruleSelector
		{ after(grammarAccess.getProjectionAccess().getSelectorSelectorParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Projection__ProjectionActionAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProjectionAccess().getProjectionActionProjectionActionParserRuleCall_2_0()); }
		ruleProjectionAction
		{ after(grammarAccess.getProjectionAccess().getProjectionActionProjectionActionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AssertEquals__AssertableElementAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAssertEqualsAccess().getAssertableElementAssertableElementParserRuleCall_1_0()); }
		ruleAssertableElement
		{ after(grammarAccess.getAssertEqualsAccess().getAssertableElementAssertableElementParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AssertEquals__AssertableElementAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAssertEqualsAccess().getAssertableElementAssertableElementParserRuleCall_3_0()); }
		ruleAssertableElement
		{ after(grammarAccess.getAssertEqualsAccess().getAssertableElementAssertableElementParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AssertContains__ContainerAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAssertContainsAccess().getContainerAssertableElementParserRuleCall_1_0()); }
		ruleAssertableElement
		{ after(grammarAccess.getAssertContainsAccess().getContainerAssertableElementParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AssertContains__ElementAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAssertContainsAccess().getElementAssertableElementParserRuleCall_3_0()); }
		ruleAssertableElement
		{ after(grammarAccess.getAssertContainsAccess().getElementAssertableElementParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NavigationAction__ActionAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNavigationActionAccess().getActionNavigationActionTypeParserRuleCall_0_0()); }
		ruleNavigationActionType
		{ after(grammarAccess.getNavigationActionAccess().getActionNavigationActionTypeParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NavigationAction__ParamAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNavigationActionAccess().getParamSTRINGTerminalRuleCall_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getNavigationActionAccess().getParamSTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__ActionAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActionAccess().getActionActionTypeParserRuleCall_0_0()); }
		ruleActionType
		{ after(grammarAccess.getActionAccess().getActionActionTypeParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__TargetAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActionAccess().getTargetActionTargetParserRuleCall_1_0()); }
		ruleActionTarget
		{ after(grammarAccess.getActionAccess().getTargetActionTargetParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__ParamAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActionAccess().getParamActionParameterParserRuleCall_2_0()); }
		ruleActionParameter
		{ after(grammarAccess.getActionAccess().getParamActionParameterParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignAction__TargetAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAssignActionAccess().getTargetActionTargetParserRuleCall_1_0()); }
		ruleActionTarget
		{ after(grammarAccess.getAssignActionAccess().getTargetActionTargetParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignAction__VariableAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAssignActionAccess().getVariableVariableParserRuleCall_2_0()); }
		ruleVariable
		{ after(grammarAccess.getAssignActionAccess().getVariableVariableParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionParameterString__ValueAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActionParameterStringAccess().getValueSTRINGTerminalRuleCall_0()); }
		RULE_STRING
		{ after(grammarAccess.getActionParameterStringAccess().getValueSTRINGTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Selector__ElementAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSelectorAccess().getElementDOMElementParserRuleCall_0_0()); }
		ruleDOMElement
		{ after(grammarAccess.getSelectorAccess().getElementDOMElementParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Selector__AttrsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSelectorAccess().getAttrsAttributesParserRuleCall_2_0()); }
		ruleAttributes
		{ after(grammarAccess.getSelectorAccess().getAttrsAttributesParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Selector__ParentAssignment_4_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSelectorAccess().getParentParentParserRuleCall_4_2_0()); }
		ruleParent
		{ after(grammarAccess.getSelectorAccess().getParentParentParserRuleCall_4_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Selector__AllAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSelectorAccess().getAllAllKeyword_5_0()); }
		(
			{ before(grammarAccess.getSelectorAccess().getAllAllKeyword_5_0()); }
			'.all'
			{ after(grammarAccess.getSelectorAccess().getAllAllKeyword_5_0()); }
		)
		{ after(grammarAccess.getSelectorAccess().getAllAllKeyword_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Parent__ElementAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParentAccess().getElementDOMElementParserRuleCall_0_0()); }
		ruleDOMElement
		{ after(grammarAccess.getParentAccess().getElementDOMElementParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Parent__AttrsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParentAccess().getAttrsAttributesParserRuleCall_2_0()); }
		ruleAttributes
		{ after(grammarAccess.getParentAccess().getAttrsAttributesParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Attributes__AttrsAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAttributesAccess().getAttrsAttributeParserRuleCall_0_0()); }
		ruleAttribute
		{ after(grammarAccess.getAttributesAccess().getAttrsAttributeParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Attributes__AttrsAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAttributesAccess().getAttrsAttributeParserRuleCall_1_1_0()); }
		ruleAttribute
		{ after(grammarAccess.getAttributesAccess().getAttrsAttributeParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAttributeAccess().getNameDOMAttributeParserRuleCall_0_0()); }
		ruleDOMAttribute
		{ after(grammarAccess.getAttributeAccess().getNameDOMAttributeParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__ValueAssignment_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAttributeAccess().getValueSTRINGTerminalRuleCall_2_0_0()); }
		RULE_STRING
		{ after(grammarAccess.getAttributeAccess().getValueSTRINGTerminalRuleCall_2_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__VariableAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAttributeAccess().getVariableVariableRefParserRuleCall_2_1_0()); }
		ruleVariableRef
		{ after(grammarAccess.getAttributeAccess().getVariableVariableRefParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionParameters__VariablesAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionParametersAccess().getVariablesVariableParserRuleCall_1_0()); }
		ruleVariable
		{ after(grammarAccess.getFunctionParametersAccess().getVariablesVariableParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionParameters__VariablesAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionParametersAccess().getVariablesVariableParserRuleCall_2_1_0()); }
		ruleVariable
		{ after(grammarAccess.getFunctionParametersAccess().getVariablesVariableParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCallParameters__VariablesAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionCallParametersAccess().getVariablesVariableCallParserRuleCall_1_0_0()); }
		ruleVariableCall
		{ after(grammarAccess.getFunctionCallParametersAccess().getVariablesVariableCallParserRuleCall_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCallParameters__VariablesAssignment_1_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionCallParametersAccess().getVariablesVariableCallParserRuleCall_1_1_1_0()); }
		ruleVariableCall
		{ after(grammarAccess.getFunctionCallParametersAccess().getVariablesVariableCallParserRuleCall_1_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableRef__RefAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableRefAccess().getRefVariableCrossReference_0()); }
		(
			{ before(grammarAccess.getVariableRefAccess().getRefVariableIDTerminalRuleCall_0_1()); }
			RULE_ID
			{ after(grammarAccess.getVariableRefAccess().getRefVariableIDTerminalRuleCall_0_1()); }
		)
		{ after(grammarAccess.getVariableRefAccess().getRefVariableCrossReference_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__NameAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_0()); }
		RULE_ID
		{ after(grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StringParameter__ValueAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStringParameterAccess().getValueSTRINGTerminalRuleCall_0()); }
		RULE_STRING
		{ after(grammarAccess.getStringParameterAccess().getValueSTRINGTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
