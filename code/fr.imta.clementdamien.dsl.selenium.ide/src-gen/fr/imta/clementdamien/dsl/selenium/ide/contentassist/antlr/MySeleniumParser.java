/*
 * generated by Xtext 2.12.0
 */
package fr.imta.clementdamien.dsl.selenium.ide.contentassist.antlr;

import com.google.inject.Inject;
import fr.imta.clementdamien.dsl.selenium.ide.contentassist.antlr.internal.InternalMySeleniumParser;
import fr.imta.clementdamien.dsl.selenium.services.MySeleniumGrammarAccess;
import java.util.HashMap;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class MySeleniumParser extends AbstractContentAssistParser {

	@Inject
	private MySeleniumGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalMySeleniumParser createParser() {
		InternalMySeleniumParser result = new InternalMySeleniumParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getProgramAccess().getAlternatives(), "rule__Program__Alternatives");
					put(grammarAccess.getProjectionActionAccess().getAlternatives(), "rule__ProjectionAction__Alternatives");
					put(grammarAccess.getStatementAccess().getAlternatives(), "rule__Statement__Alternatives");
					put(grammarAccess.getAssertableElementAccess().getAlternatives(), "rule__AssertableElement__Alternatives");
					put(grammarAccess.getNavigationActionTypeAccess().getAlternatives(), "rule__NavigationActionType__Alternatives");
					put(grammarAccess.getTwoParametersActionAccess().getParameterAlternatives_2_0(), "rule__TwoParametersAction__ParameterAlternatives_2_0");
					put(grammarAccess.getAttributeAccess().getAlternatives_2(), "rule__Attribute__Alternatives_2");
					put(grammarAccess.getDOMAttributeAccess().getAlternatives(), "rule__DOMAttribute__Alternatives");
					put(grammarAccess.getDOMElementAccess().getAlternatives(), "rule__DOMElement__Alternatives");
					put(grammarAccess.getTwoParametersActionTypeAccess().getAlternatives(), "rule__TwoParametersActionType__Alternatives");
					put(grammarAccess.getVariableCallAccess().getAlternatives(), "rule__VariableCall__Alternatives");
					put(grammarAccess.getFunctionAccess().getGroup(), "rule__Function__Group__0");
					put(grammarAccess.getFunctionCallAccess().getGroup(), "rule__FunctionCall__Group__0");
					put(grammarAccess.getProjectionAccess().getGroup(), "rule__Projection__Group__0");
					put(grammarAccess.getAssertEqualsAccess().getGroup(), "rule__AssertEquals__Group__0");
					put(grammarAccess.getAssertContainsAccess().getGroup(), "rule__AssertContains__Group__0");
					put(grammarAccess.getNavigationActionAccess().getGroup(), "rule__NavigationAction__Group__0");
					put(grammarAccess.getOneParameterActionAccess().getGroup(), "rule__OneParameterAction__Group__0");
					put(grammarAccess.getTwoParametersActionAccess().getGroup(), "rule__TwoParametersAction__Group__0");
					put(grammarAccess.getSelectorAccess().getGroup(), "rule__Selector__Group__0");
					put(grammarAccess.getAttributesAccess().getGroup(), "rule__Attributes__Group__0");
					put(grammarAccess.getAttributesAccess().getGroup_1(), "rule__Attributes__Group_1__0");
					put(grammarAccess.getAttributeAccess().getGroup(), "rule__Attribute__Group__0");
					put(grammarAccess.getFunctionParametersAccess().getGroup(), "rule__FunctionParameters__Group__0");
					put(grammarAccess.getFunctionParametersAccess().getGroup_2(), "rule__FunctionParameters__Group_2__0");
					put(grammarAccess.getFunctionCallParametersAccess().getGroup(), "rule__FunctionCallParameters__Group__0");
					put(grammarAccess.getFunctionCallParametersAccess().getGroup_2(), "rule__FunctionCallParameters__Group_2__0");
					put(grammarAccess.getCommentAccess().getGroup(), "rule__Comment__Group__0");
					put(grammarAccess.getProgramAccess().getFunctionsAssignment_0(), "rule__Program__FunctionsAssignment_0");
					put(grammarAccess.getProgramAccess().getStatementsAssignment_1(), "rule__Program__StatementsAssignment_1");
					put(grammarAccess.getFunctionsAccess().getFunctionsAssignment(), "rule__Functions__FunctionsAssignment");
					put(grammarAccess.getStatementsAccess().getStatementsAssignment(), "rule__Statements__StatementsAssignment");
					put(grammarAccess.getFunctionAccess().getNameAssignment_1(), "rule__Function__NameAssignment_1");
					put(grammarAccess.getFunctionAccess().getParamsAssignment_2(), "rule__Function__ParamsAssignment_2");
					put(grammarAccess.getFunctionAccess().getStatementsAssignment_4(), "rule__Function__StatementsAssignment_4");
					put(grammarAccess.getFunctionNameAccess().getNameAssignment(), "rule__FunctionName__NameAssignment");
					put(grammarAccess.getFunctionCallAccess().getRefAssignment_0(), "rule__FunctionCall__RefAssignment_0");
					put(grammarAccess.getFunctionCallAccess().getParamsAssignment_1(), "rule__FunctionCall__ParamsAssignment_1");
					put(grammarAccess.getProjectionAccess().getSelectorAssignment_0(), "rule__Projection__SelectorAssignment_0");
					put(grammarAccess.getProjectionAccess().getProjectionActionAssignment_2(), "rule__Projection__ProjectionActionAssignment_2");
					put(grammarAccess.getAssertEqualsAccess().getAssertableElementAssignment_1(), "rule__AssertEquals__AssertableElementAssignment_1");
					put(grammarAccess.getAssertEqualsAccess().getAssertableElementAssignment_3(), "rule__AssertEquals__AssertableElementAssignment_3");
					put(grammarAccess.getAssertContainsAccess().getContainerAssignment_1(), "rule__AssertContains__ContainerAssignment_1");
					put(grammarAccess.getAssertContainsAccess().getElementAssignment_3(), "rule__AssertContains__ElementAssignment_3");
					put(grammarAccess.getNavigationActionAccess().getActionAssignment_0(), "rule__NavigationAction__ActionAssignment_0");
					put(grammarAccess.getNavigationActionAccess().getParamAssignment_1(), "rule__NavigationAction__ParamAssignment_1");
					put(grammarAccess.getOneParameterActionAccess().getActionAssignment_0(), "rule__OneParameterAction__ActionAssignment_0");
					put(grammarAccess.getOneParameterActionAccess().getSelectorAssignment_1(), "rule__OneParameterAction__SelectorAssignment_1");
					put(grammarAccess.getTwoParametersActionAccess().getActionAssignment_0(), "rule__TwoParametersAction__ActionAssignment_0");
					put(grammarAccess.getTwoParametersActionAccess().getSelectorAssignment_1(), "rule__TwoParametersAction__SelectorAssignment_1");
					put(grammarAccess.getTwoParametersActionAccess().getParameterAssignment_2(), "rule__TwoParametersAction__ParameterAssignment_2");
					put(grammarAccess.getSelectorAccess().getElementAssignment_0(), "rule__Selector__ElementAssignment_0");
					put(grammarAccess.getSelectorAccess().getAttrsAssignment_2(), "rule__Selector__AttrsAssignment_2");
					put(grammarAccess.getAttributesAccess().getAttrsAssignment_0(), "rule__Attributes__AttrsAssignment_0");
					put(grammarAccess.getAttributesAccess().getAttrsAssignment_1_1(), "rule__Attributes__AttrsAssignment_1_1");
					put(grammarAccess.getAttributeAccess().getNameAssignment_0(), "rule__Attribute__NameAssignment_0");
					put(grammarAccess.getAttributeAccess().getValAssignment_2_1(), "rule__Attribute__ValAssignment_2_1");
					put(grammarAccess.getFunctionParametersAccess().getVariablesAssignment_1(), "rule__FunctionParameters__VariablesAssignment_1");
					put(grammarAccess.getFunctionParametersAccess().getVariablesAssignment_2_1(), "rule__FunctionParameters__VariablesAssignment_2_1");
					put(grammarAccess.getFunctionCallParametersAccess().getVariablesAssignment_1(), "rule__FunctionCallParameters__VariablesAssignment_1");
					put(grammarAccess.getFunctionCallParametersAccess().getVariablesAssignment_2_1(), "rule__FunctionCallParameters__VariablesAssignment_2_1");
					put(grammarAccess.getVariableCallAccess().getNameAssignment_0(), "rule__VariableCall__NameAssignment_0");
					put(grammarAccess.getVariableAccess().getNameAssignment(), "rule__Variable__NameAssignment");
				}
			};
		}
		return nameMappings.get(element);
	}
			
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public MySeleniumGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(MySeleniumGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
